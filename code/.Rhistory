"Yorkshire Terrier",
"Saluki",
"Cocker Spaniel",
"Boston Bull",
"Not A Dog",
"Yorkshire Terrier",
"Boston Bull",
"Golden retriever",
"Bloodhound",
"Golden retriever",
"Bloodhound",
"Saluki",
"Boston Bull",
"Shih Tzu",
"Bloodhound",
"Boston Bull",
"Irish wolfhound",
"Shih Tzu",
"Irish wolfhound",
"Bloodhound"
)
allQ = c("TQ1", "TQ2", "TQ3", "TQ4", "TQ5", "TQ6",
"TQ7", "TQ8", "TQ9", "TQ10", "TQ11", "TQ12",
"TQ13", "TQ14", "TQ15", "TQ16", "SQ1","TQ17", "TQ18",
"TQ19", "TQ20", "TQ21", "TQ22", "TQ23", "TQ24",
"TQ25", "TQ26", "TQ27", "TQ28", "TQ29", "TQ30",
"TQ31", "TQ32", "TQ33", "SQ2","TQ34", "TQ35", "TQ36",
"TQ37", "TQ38", "TQ39", "TQ40", "TQ41", "TQ42",
"TQ43", "TQ44", "TQ45", "TQ46", "TQ47", "TQ48")
path1 = "F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/qualtric_data/20171028_qualtric_results_pilot_0.25.csv"
current_task_data = fread(path1)[-c(1,2),] # strip off first two rows of non-response information
current_task_data = current_task_data[StartDate != "",] # stip off any empty rows at the end
path1 = "../qualtric_data/20171028_qualtric_results_pilot_0.25.csv"
current_task_data = fread(path1)[-c(1,2),] # strip off first two rows of non-response information
current_task_data = current_task_data[StartDate != "",] # stip off any empty rows at the end
get_worderIDs_viewed_task = function(current_task_data) {
available = current_task_data[worker_id != "", ]$worker_id
available
}
# get list of worker ids from turks who completed the task
get_worderIDs_completed_task = function(current_task_data) {
available = current_task_data[Finished == "TRUE", ]$worker_id
available
}
# get list of worker ids from turks who did not completed the task
get_worderIDs_not_completed_task = function(current_task_data) {
available = current_task_data[Finished == "FALSE", ]$worker_id
available
}
path3 = "../MTurk_worderIDs/MTurk_worderIDsworker_task_status.csv"
construct_frame_worderIDs_task_status = function(existing_path, current_task_data, allQ) {
existing_dt = fread(existing_path)
# check accuracy of current task data
raw_reponses = current_task_data[, allQ]
}
# convert from raw ans to correct/wrong responses
# return new data table [worder_id, covariates, time_spent, TQ1correct, TQ2correct...]
convert_raw_to_correct_ans = function(current_task_data, allQ) {
# raw response
tmp.dt.finished = current_task_data[Finished == "TRUE", ]
# correct response scaffold
tmp.dt.correct = data.table(worker_id = tmp.dt.finished$worker_id,
CQ1 = tmp.dt.finished$CQ1,
CQ2_1 = tmp.dt.finished$CQ2_1,
CQ2_2 = tmp.dt.finished$CQ2_2,
CQ2_3 = tmp.dt.finished$CQ2_3,
CQ2_4 = tmp.dt.finished$CQ2_4,
CQ3 = tmp.dt.finished$CQ3,
CQ4 = tmp.dt.finished$CQ4,
CQ5 = tmp.dt.finished$CQ5,
time_spent = tmp.dt.finished$`Timer1_Page Submit`)
# correct responses fill in
for (i in 1:length(allQ)) {
question.name = allQ[i]
answer = ans[i]
column.correct = as.numeric(tmp.dt.finished[,get(question.name)] == answer)
new_col = data.table("dum_name" = column.correct)
names(new_col)[names(new_col) == "dum_name"] <- question.name
tmp.dt.correct = cbind(tmp.dt.correct, new_col)
}
tmp.dt.correct
}
# convert_raw_to_correct_ans(current_task_data, allQ)
# evaluate worker performance for those who completed the task
# screener questions included in evaluation
# return new data table
evaluate_worker_perf = function(current_task_data, allQ) {
# read in correct responses
tmp.dt.perf = convert_raw_to_correct_ans(current_task_data, allQ)
# const accuracy col
tmp.dt.perf[,
accuracy:= sum(c(TQ1,TQ2,TQ3,TQ4,TQ5,TQ6,
TQ7,TQ8,TQ9,TQ10,TQ11,TQ12,
TQ13,TQ14,TQ15,TQ16,SQ1,TQ17,TQ18,
TQ19,TQ20,TQ21,TQ22,TQ23,TQ24,
TQ25,TQ26,TQ27,TQ28,TQ29,TQ30,
TQ31,TQ32,TQ33,SQ2,TQ34,TQ35,TQ36,
TQ37,TQ38,TQ39,TQ40,TQ41,TQ42,
TQ43,TQ44,TQ45,TQ46,TQ47,TQ48))/length(allQ),
by = worker_id]
# const screener col
tmp.dt.perf[,screener:= as.numeric(SQ1==1 & SQ2==1)]
dt.perf = tmp.dt.perf[,c("worker_id", "CQ1", "CQ2_1", "CQ2_2", "CQ2_3", "CQ2_4",
"CQ3", "CQ4", "CQ5", "time_spent", "accuracy", "screener")]
dt.perf
}
evaluate_worker_perf(current_task_data, allQ)
evaluate_question_accuracy = function(current_task_data, allQ) {
# read in correct responses
tmp.dt.questions = convert_raw_to_correct_ans(current_task_data, allQ)
n = length(allQ) - 2 # minus 2 screener questions
tmp.dt.questions[, .(
mean = mean(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48)),
sd = sd(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48)),
se = sd(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48))/sqrt(n),
min = min(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48)),
max = max(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48))
)]
tmp.dt.questions
}
evaluate_question_accuracy = function(current_task_data, allQ)
# screener questions not included
evaluate_question_accuracy = function(current_task_data, allQ) {
# read in correct responses
tmp.dt.questions = convert_raw_to_correct_ans(current_task_data, allQ)
n = length(allQ) - 2 # minus 2 screener questions
tmp.dt.questions[, .(
mean = mean(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48)),
sd = sd(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48)),
se = sd(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48))/sqrt(n),
min = min(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48)),
max = max(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48))
)]
tmp.dt.questions
}
evaluate_question_accuracy(current_task_data, allQ)
evaluate_question_accuracy(current_task_data, allQ)
evaluate_question_accuracy = function(current_task_data, allQ) {
# read in correct responses
tmp.dt.questions = convert_raw_to_correct_ans(current_task_data, allQ)
n = length(allQ) - 2 # minus 2 screener questions
tmp.dt.questions[, .(
mean = mean(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48)),
sd = sd(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48)),
se = sd(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48))/sqrt(n),
min = min(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48)),
max = max(c(TQ1, TQ2, TQ3, TQ4, TQ5, TQ6,
TQ7, TQ8, TQ9, TQ10, TQ11, TQ12,
TQ13, TQ14, TQ15, TQ16, TQ17, TQ18,
TQ19, TQ20, TQ21, TQ22, TQ23, TQ24,
TQ25, TQ26, TQ27, TQ28, TQ29, TQ30,
TQ31, TQ32, TQ33, TQ34, TQ35, TQ36,
TQ37, TQ38, TQ39, TQ40, TQ41, TQ42,
TQ43, TQ44, TQ45, TQ46, TQ47, TQ48))
)]
}
evaluate_question_accuracy(current_task_data, allQ)
evaluate_worker_perf(current_task_data, allQ)
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status
DONT_USE_construct_frame_workerIDs_task_empty = function(custom_path) {
tmp_frame = data.table(key= c("worker_id, StartDate, task_description, complete,
screener, accuracy, payment_threshold, pay_or_not"))
write.csv(x = tmp_frame, file = custom_path)
}
dt_completer_status[, complete := 1]
dt_completer_status
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := (accuracy >= 0.25 & screener == 1)]
payment_threshold = 0.25
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := (accuracy >= payment_threshold & screener == 1)]
dt_completer_status
dt_completer_status
construct_frame_worderIDs_task_status = function(existing_path, current_task_data, allQ, payment_accuracy_threshold) {
existing_dt = fread(existing_path)
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
dt_not_completer_status = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
}
construct_frame_worderIDs_task_status(path3, current_task_data, allQ, payment_accuracy_threshold = 0.25)
construct_frame_worderIDs_task_status = function(existing_path, current_task_data, allQ, payment_accuracy_threshold) {
existing_dt = fread(existing_path)
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
dt_not_completer_status = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status[, accuracy := 0][, screener := 0][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
}
construct_frame_worderIDs_task_status(path3, current_task_data, allQ, payment_accuracy_threshold = 0.25)
# get dataframe of worker ids and their task status
construct_frame_worderIDs_task_status = function(existing_path, current_task_data, allQ, payment_accuracy_threshold) {
existing_dt = fread(existing_path)
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
}
construct_frame_worderIDs_task_status(path3, current_task_data, allQ, payment_accuracy_threshold = 0.25)
construct_frame_worderIDs_task_status = function(existing_path, current_task_data, allQ, payment_accuracy_threshold) {
existing_dt = fread(existing_path)
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status
}
construct_frame_worderIDs_task_status(path3, current_task_data, allQ, payment_accuracy_threshold = 0.25)
construct_frame_worderIDs_task_status = function(existing_path, current_task_data, allQ, payment_accuracy_threshold) {
existing_dt = fread(existing_path)
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
# append to existing data
existing_dt = rbind(existing_dt, dt_status)
write.csv(existing_dt, file = existing_path)
dt_status
}
construct_frame_worderIDs_task_status = function(current_task_data, allQ, payment_accuracy_threshold, task_name) {
existing_dt = fread(existing_path)
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, task_name = task_name]
dt_status
}
construct_frame_worderIDs_task_status(current_task_data, allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
construct_frame_worderIDs_task_status = function(current_task_data, allQ, payment_accuracy_threshold, task_name) {
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, task_name = task_name]
dt_status
}
construct_frame_worderIDs_task_status(current_task_data, allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
construct_frame_worderIDs_task_status = function(current_task_data, allQ, payment_accuracy_threshold, task_name) {
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, task_name = task_name]
dt_status
}
construct_frame_worderIDs_task_status(current_task_data = current_task_data, allQ = allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
construct_frame_worderIDs_task_status = function(current_task_data, allQ, payment_accuracy_threshold, task_name) {
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, task_name := task_name]
dt_status
}
construct_frame_worderIDs_task_status(current_task_data = current_task_data, allQ = allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
dum = construct_frame_worderIDs_task_status(current_task_data = current_task_data, allQ = allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
dum
construct_frame_worderIDs_task_status = function(current_task_data, allQ, payment_accuracy_threshold, task_name) {
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, task_name := task_name]
dt_status[, task_date := current_task_data[1]$StartDate]
dt_status
}
dum = construct_frame_worderIDs_task_status(current_task_data = current_task_data, allQ = allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
dum
dum
construct_frame_worderIDs_task_status = function(current_task_data, allQ, payment_accuracy_threshold, task_name) {
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, task_name := task_name]
dt_status[, task_date := substr(current_task_data[1]$StartDate, 1, 10)]
dt_status
}
dum = construct_frame_worderIDs_task_status(current_task_data = current_task_data, allQ = allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
dum
dum
get_current_task_data = function(csv_path) {
current_task_data = fread(csv_path)[-c(1,2),] # strip off first two rows of non-reposnse information
current_task_data = current_task_data[StartDate != "",] # stip off any empty rows at the end
}
sum(dum$pay_or_not)
dum = construct_frame_worderIDs_task_status(current_task_data = current_task_data, allQ = allQ, payment_accuracy_threshold = 0.30, task_name = "pilot 0.25")
sum(dum$pay_or_not)
Source(data_transformation_functions.r)
source(data_transformation_functions.r)
construct_frame_worderIDs_task_status(current_task_data = current_task_data], allQ = allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
construct_frame_worderIDs_task_status(current_task_data = current_task_data, allQ = allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
allQ = allQ, payment_accuracy_threshold = 0.25,
task_name = "pilot 0.25")
worderIDs_task_status
worderIDs_task_status
worderIDs_task_status[pay_or_not == 1, "worker_id"]
qualtric_data_path = "../qualtric_data/20171028_qualtric_results_pilot_0.10.csv"
# load supporting functions
source(file = "data_transformation_functions.r")
# construct_frame_worderIDs_task_status(current_task_data, allQ, payment_accuracy_threshold, task_name)
# adjust the payment threshold if 0.25 task accuracy is too low
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
allQ = allQ, payment_accuracy_threshold = 0.25,
task_name = "pilot 0.25")
# Who to pay
worderIDs_task_status[pay_or_not == 1, "worker_id"]
worderIDs_task_status
# this is the qualtric csv file you download from qualtric platform, containing survey results
qualtric_data_path = "../qualtric_data/20171028_qualtric_results_pilot_0.25.csv"
# load supporting functions
source(file = "data_transformation_functions.r")
# construct_frame_worderIDs_task_status(current_task_data, allQ, payment_accuracy_threshold, task_name)
# adjust the payment threshold if 0.25 task accuracy is too low
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
allQ = allQ, payment_accuracy_threshold = 0.25,
task_name = "pilot 0.25")
# Who to pay
worderIDs_task_status[pay_or_not == 1, "worker_id"]
get_MTurk_worker_id = function(csv_path) {
current_MTurk_data = fread(csv_path)
worker_id = current_MTurk_data$WorkerId
worker_id
}
get_MTurk_worker_id(csv_path = MTurk_data_path)
MTurk_data_path = "../MTurk_data/20171028_mturk_results_pilot_0.25.csv"
get_MTurk_worker_id(csv_path = MTurk_data_path)
