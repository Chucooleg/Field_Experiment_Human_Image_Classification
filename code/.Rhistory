group <- c(rep("Mecca",20),rep("NoMecca",20))
po.control <- c(seq(from = -12, to = 12), seq(from = -12, to = 12))
randomize <- function() sample(c(rep(0,24),rep(1,24)))
randomize()
outcomes <- po.treatment * treatment + po.control*(1-treatment)
po.control
describe(d3.6)
d3.6.describe()
randomize <- function() sample(c(rep(0,25),rep(1,25)))
randomize()
treatment <- randomize()
outcomes <- po.treatment * treatment + po.control*(1-treatment)
po.treatment <- po.control #no effect because potential outcomes in treatment are the same
outcomes <- po.treatment * treatment + po.control*(1-treatment)
est.ate <- function(d3.6, success) mean(d3.6[success==1]) - mean(d3.6[success==0])
ate <- est.ate(outcomes, treatment)
distribution.under.sharp.null <- replicate(10000, est.ate(d3.6[success], randomize()))
d3.6 <- read.csv("./data/Clingingsmith.2009.csv")
head(d3.6)
group <- c(rep("Mecca",20),rep("NoMecca",20))
po.treatment <- po.control #no effect because potential outcomes in treatment are the same
po.control
po.treatment
randomize()
treatment <- randomize()
est.ate <- function(d3.6, success) mean(d3.6[success==1]) - mean(d3.6[success==0])
ate <- est.ate(outcomes, treatment)
distribution.under.sharp.null <- replicate(10000, est.ate(d3.6[success], randomize()))
d3.6[success]
est.ate <- function(d3.6, success) mean(d3.6[which(success==1)] - mean(d3.6[which(success==0)])
ate <- est.ate(outcomes, treatment)
est.ate <- function(d3.6, success) mean(d3.6[which(success==1)] - mean(d3.6[which(success==0)])
ate <- est.ate(outcomes, treatment)
mean(d3.6[which(success==1)])
mean(d3.6[success])
d3.6$success
est.ate <- function(d3.6, success) mean(d3.6$success==1) - mean(d3.6$success==0))
est.ate <- function(d3.6, success) mean(d3.6$success==1) - mean(d3.6$success==0)
ate <- est.ate(outcomes, treatment)
treatment
outcomes
est.ate <- function(outcome, treat) mean(outcome[treat==1]) - mean(outcome[treat==0])
ate <- est.ate(outcomes, treatment)
distribution.under.sharp.null <- replicate(10000, est.ate(outcomes, randomize()))
plot(density(distribution.under.sharp.null))
describe(d3.6)
import(Hmisc)
browser()
rmarkdown::render(...)
rmarkdown::render()
rmarkdown::render(~/ps2.Rmd)
rmarkdown::render(/ps2.Rmd)
rmarkdown::render(ps2.Rmd)
rmarkdown::render('ps2.Rmd')
rmarkdown::render('~/ps2.Rmd')
rmarkdown::render('./ps2.Rmd')
rmarkdown::render('/ps2.Rmd')
rmarkdown::render('ps2.Rmd')
rmarkdown::render('~/ps2.Rmd')
rmarkdown::render('~/experiments-causality/ps2.Rmd')
rmarkdown::render('~/experiments-causality/assignments/PS2-upstream/ps2.Rmd')
rmarkdown::render('~/experiments-causality/assignments/PS2-upstream/ps2.Rmd')
m1 <- lm(y ~ x, data = p)
d <- read.csv("./data/broockman_green_anon_pooled_fb_users_only.csv")
m3 <- lm(name_recall ~ treat_ad + studyno, data=d)
m3
m3$cluster.vcov <- cluster.vcov(m3, ~ cluster)
coeftest(m3, m3$cluster.vcov)
library(lmtest)
library(multiwayvcov)
coeftest(m3, m3$cluster.vcov)
library(foreign)
d <- read.dta("./data/karlan_data_subset_for_class.dta")
head(d)
head(d$havecell)
range(d$avg_bins_treat)
summary(d)
plot(d)
m1 <- lm(avg_bins_treat ~ bin, data = d)
m1
t.test(avg_bins_treat ~ bin, data = d)
m2 <- lm(avg_bins_treat ~ bin + base_avg_bins_treat, data = d )
summary(m2)
t.test(m2, data = d)
t.test(avg_bins_treat ~ bin + base_avg_bins_treat, data = d)
m2$vcovHC <- vcovHC(m2)
coeftest(m2)
m3$vcovHC <- vcovHC(m3)
m3 <- lm(avg_bins_treat ~ bin + base_avg_bins_treat + factor(street), data = d )
m3
m3$vcovHC <- vcovHC(m3)
coeftest(m3)
m2$cluster.vcov <- cluster.vcov(m2, ~ factor(street))
m2$cluster.vcov <- cluster.vcov(m2, ~ factor(d$street))
coeftest(m2, m2$cluster.vcov)
m3 <- lm(avg_bins_treat ~ bin + base_avg_bins_treat + nocell, data = d )
summary(m3)
m3 <- lm(avg_bins_treat ~ bin + base_avg_bins_treat + nocell, data = d )
nocell <- 1 - d$havecell
m3 <- lm(avg_bins_treat ~ bin + base_avg_bins_treat + nocell, data = d )
summary(m3)
m3$cluster.vcov <- cluster.vcov(m3, ~ factor(d$street))
coeftest(m3, m3$cluster.vcov)
m4 <- lm(avg_bins_treat ~ bin + base_avg_bins_treat + nocell + sms, data = d )
summary(m4)
m5 <- lm(avg_bins_treat ~ bin_s + bin_g + sms_p + sms_g + base_avg_bins_treat + nocell, data = d )
summary(m5)
m5$cluster.vcov <- cluster.vcov(m5, ~ factor(d$street))
coeftest(m5, m5$cluster.vcov)
d <- read.csv("./data/ebola_rct2.csv")
head(d)
m4 <- lm(vomiting_day14 ~ treat_zmapp + male + vomiting_day0 + temperature_day0, data = d)
summary(m4)
View(d)
rm(list = ls())
setwd("/home/fred/Field_Experiment_Human_Image_Classification/code")
source(file = "design1_data_transformation_functions.r")
qualtric_data_path_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
current_task_data_0.10 = get_current_task_data(qualtric_data_path_0.10)
question_perf_0.10 = evaluate_question_perf(current_task_data_0.10, allQ)
question_perf_0.10
summarize_question_accuracy(current_task_data_0.10, allQ)
worker_perf_0.10 = evaluate_worker_perf(current_task_data_0.10, allQ)
worker_perf_0.10
summarize_worker_perf(current_task_data_0.10, allQ)
nrow(worker_perf_0.10)
qualtric_data_path_0.55 = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv"
current_task_data_0.55 = get_current_task_data(qualtric_data_path_0.55)
filter = !(current_task_data_0.55$worker_id %in% current_task_data_0.10$worker_id)
sum_spillover = sum(!filter)
current_task_data_0.55_weeded = current_task_data_0.55[filter, ]
question_perf_0.55 = evaluate_question_perf(current_task_data_0.55_weeded, allQ)
question_perf_0.55
summarize_question_accuracy(current_task_data_0.55_weeded, allQ)
worker_perf_0.55 = evaluate_worker_perf(current_task_data_0.55_weeded, allQ)
worker_perf_0.55
summarize_worker_perf(current_task_data_0.55_weeded, allQ)
nrow(worker_perf_0.55)
qualtric_data_path_0.40 = "../qualtric_data/20171112_qualtric_results_order1_0.40.csv"
current_task_data_0.40 = get_current_task_data(qualtric_data_path_0.40)
question_perf_0.40 = evaluate_question_perf(current_task_data_0.40, allQ)
question_perf_0.40
summarize_question_accuracy(current_task_data_0.40, allQ)
worker_perf_0.40 = evaluate_worker_perf(current_task_data_0.40, allQ)
worker_perf_0.40
summarize_worker_perf(current_task_data_0.40, allQ)
nrow(worker_perf_0.40)
qualtric_data_path_0.25 = "../qualtric_data/20171112_qualtric_results_order1_0.25.csv"
current_task_data_0.25 = get_current_task_data(qualtric_data_path_0.25)
filter = !(current_task_data_0.25$worker_id %in% current_task_data_0.40$worker_id)
sum_spillover = sum(!filter)
current_task_data_0.25_weeded = current_task_data_0.25[filter, ]
question_perf_0.25 = evaluate_question_perf(current_task_data_0.25_weeded, allQ)
question_perf_0.25
summarize_question_accuracy(current_task_data_0.25_weeded, allQ)
worker_perf_0.25 = evaluate_worker_perf(current_task_data_0.25_weeded, allQ)
worker_perf_0.25
summarize_worker_perf(current_task_data_0.25_weeded, allQ)
nrow(worker_perf_0.25)
worker_perf_0.10$treatment = 0.10
worker_perf_0.55$treatment = 0.55
worker_perf_0.40$treatment = 0.40
worker_perf_0.25$treatment = 0.25
regr_table = rbind(worker_perf_0.10, worker_perf_0.25, worker_perf_0.40, worker_perf_0.55) # ONCE ALL FOUR POSTINGS ARE DONE
regr_table$CQ1 = as.factor(regr_table$CQ1)
regr_table$CQ2_3 = as.numeric(regr_table$CQ2_3)
regr_table$CQ3 = as.factor(regr_table$CQ3)
regr_table$CQ5 = regr_table$CQ5 == "Yes"
regr_table$CQ4 = as.factor(regr_table$CQ4)
CQ1_1 = regr_table$CQ1 == "a lot less than half"
CQ1_2 = regr_table$CQ1 == "around half"
CQ1_3 = regr_table$CQ1 == "a lot more than half"
cov_regr_CQ1_1= lm(CQ1_1 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ1_1, vcov(cov_regr_CQ1_1))
cov_regr_CQ1_2= lm(CQ1_2 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ1_2, vcov(cov_regr_CQ1_2))
cov_regr_CQ1_3= lm(CQ1_3 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ1_3, vcov(cov_regr_CQ1_3))
cov_regr_CQ2_3= lm(CQ2_3 ~ treatment, data = regr_table)
lmtest::coeftest(cov_regr_CQ2_3, vcov(cov_regr_CQ2_3))
CQ3_1 = regr_table$CQ3 == "Yes"
CQ3_2 = regr_table$CQ3 == "No"
CQ3_3 = regr_table$CQ3 == "Maybe"
cov_regr_CQ3_1= lm(CQ3_1 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ3_1, vcov(cov_regr_CQ3_1))
cov_regr_CQ3_2= lm(CQ3_2 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ3_2, vcov(cov_regr_CQ3_2))
cov_regr_CQ3_3= lm(CQ3_3 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ3_3, vcov(cov_regr_CQ3_3))
est.t.test = function(d1, d2, alt){
stacked_data = stack(list(d1=d1,d2=d2))
ltest = car::leveneTest(values~ind,data = stacked_data, center = median)
levene_p_val = ltest[1,3]
t.test(d1, d2, alternative = alt, var.equal = levene_p_val >0.05)
}
est.t.test(worker_perf_0.10$accuracy,worker_perf_0.55$accuracy, "two.sided")
est.t.test(worker_perf_0.10$accuracy,worker_perf_0.25$accuracy, "two.sided")
est.t.test(worker_perf_0.10$accuracy,worker_perf_0.40$accuracy, "two.sided")
est.t.test(worker_perf_0.25$accuracy,worker_perf_0.40$accuracy, "two.sided")
est.t.test(worker_perf_0.25$accuracy,worker_perf_0.55$accuracy, "two.sided")
est.t.test(worker_perf_0.40$accuracy,worker_perf_0.55$accuracy, "two.sided")
est.regr.simple = function(r_table){
regr = lm(accuracy ~ treatment, data = r_table)
lmtest::coeftest(regr, vcov(regr))
}
est.regr.covars = function(r_table){
regr = lm(accuracy ~ treatment + CQ1 + CQ2_3 + CQ3, data = r_table)
lmtest::coeftest(regr, vcov(regr))
}
est.regr.full = function(r_table){
regr = lm(accuracy ~ treatment + CQ1 + CQ2_3 + CQ3 + CQ4 + CQ5, data = r_table)
lmtest::coeftest(regr, vcov(regr))
}
est.regr.simple(regr_table)
est.regr.covars(regr_table)
est.regr.full(regr_table)
n10 = nrow(worker_perf_0.10)
n25 = nrow(worker_perf_0.25)
n40 = nrow(worker_perf_0.40)
n55 = nrow(worker_perf_0.55)
rand_ass = function() sample(c(rep(0.1,n10),rep(0.25,n25), rep(0.4,n40), rep(0.55,n55)))
est.ri.ate = function(d, treatment){
d$treatment_new = treatment
m1 = lm(accuracy ~ treatment_new, data =d)
ate = lmtest::coeftest(m1, vcov(m1))[2]
return(ate)
}
ate = est.ri.ate(regr_table,regr_table$treatment)
all_ate <- replicate(5000, est.ri.ate(regr_table, rand_ass()))
mean(ate<all_ate)
mean(ate < all_ate & -ate > -all_ate)
hist(regr_table$accuracy)
hist(regr_table[treatment == 0.55,]$accuracy)
hist(regr_table[treatment == 0.10,]$accuracy)
hist(regr_table[treatment == 0.25,]$accuracy)
hist(regr_table[treatment == 0.40,]$accuracy)
est.regr.full(regr_table)
est.regr.highord = function(r_table){
regr = lm(accuracy ~ treatment + CQ1 + CQ2_3 + CQ3 + CQ4 + CQ5, data = r_table)
lmtest::coeftest(regr, vcov(regr))
}
est.regr.highord = function(r_table){
regr = lm(accuracy ~ treatment + treatment^2 + CQ1 + CQ2_3 + CQ3 + CQ4 + CQ5, data = r_table)
lmtest::coeftest(regr, vcov(regr))
}
est.regr.highord(regr_table)
est.regr.highord = function(r_table){
regr = lm(accuracy ~ treatment + treatment^2 + CQ1 + CQ2_3 + CQ3 + CQ4 + CQ5, data = r_table)
lmtest::coeftest(regr, vcov(regr))
}
est.regr.highord(regr_table)
est.regr.highord = function(r_table){
regr = lm(accuracy ~ treatment + treatment^2 + CQ1 + CQ2_3 + CQ3 + CQ4 + CQ5, data = r_table)
lmtest::coeftest(regr, vcov(regr))
}
est.regr.highord(regr_table)
est.regr.highord = function(r_table){
regr = lm(accuracy ~ treatment + (treatment^2) + CQ1 + CQ2_3 + CQ3 + CQ4 + CQ5, data = r_table)
lmtest::coeftest(regr, vcov(regr))
}
est.regr.highord(regr_table)
treatment_sq <- treatment^2
treatment_sq <- regr_table$treatment^2
regr = lm(accuracy ~ treatment + treatment_sq + CQ1 + CQ2_3 + CQ3 + CQ4 + CQ5, data = r_table)
est.regr.highord = function(r_table){
regr = lm(accuracy ~ treatment + treatment_sq + CQ1 + CQ2_3 + CQ3 + CQ4 + CQ5, data = r_table)
lmtest::coeftest(regr, vcov(regr))
}
est.regr.highord(regr_table)
treatment_cubed <- regr_table$treatment^3
est.regr.highord = function(r_table){
regr = lm(accuracy ~ treatment + treatment_sq + CQ1 + CQ2_3 + CQ3 + CQ4 + CQ5, data = r_table)
lmtest::coeftest(regr, vcov(regr))
}
est.regr.highord(regr_table)
regr = lm(accuracy ~ treatment + treatment_sq + treatment_cubed + CQ1 + CQ2_3 + CQ3 + CQ4 + CQ5, data = r_table)
est.regr.highord = function(r_table){
regr = lm(accuracy ~ treatment + treatment_sq + treatment_cubed + CQ1 + CQ2_3 + CQ3 + CQ4 + CQ5, data = r_table)
lmtest::coeftest(regr, vcov(regr))
}
est.regr.highord(regr_table)
