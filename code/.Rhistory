task_name = "order1", #!!! UPDATE
treatment_payrate = 0.40)
worderIDs_task_status
worderIDs_task_status
evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
convert_raw_to_correct_ans(current_task_data, allQ)
current_task_data[Finished == "TRUE", ]
current_task_data[Finished == "TRUE", ]
current_task_data
current_task_data$Finished
current_task_data[Finished == "TRUE", ]
current_task_data[Finished == "TRUE", ]
upper(T )
rm(list = ls())
# this is the qualtric csv file you download from qualtric platform, containing survey results
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
qualtric_data_path = "../qualtric_data/20171112_qualtric_results_order1_0.40.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171112_mturk_results_order1_0.40.csv" #!!! UPDATE
# load supporting functions
source(file = "design1_data_transformation_functions.r")
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!! UPDATE
treatment_payrate = 0.40) #!!! UPDATE
# Who to pay
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk")]
current_task_data
convert_raw_to_correct_ans(current_task_data, allQ)
tmp.dt.questions = convert_raw_to_correct_ans(current_task_data, allQ)
tmp.dt.questions
tmp.dt.questions = convert_raw_to_correct_ans(current_task_data, allQ)
tmp.dt.questions = tmp.dt.questions[, c("TQ1","TQ2","TQ3","TQ4","TQ5","TQ6",
"TQ7","TQ8","TQ9","TQ10","TQ11","TQ12",
"TQ13","TQ14","TQ15","TQ16","SQ1","TQ17","TQ18",
"TQ19","TQ20","TQ21","TQ22","TQ23","TQ24",
"TQ25","TQ26","TQ27","TQ28","TQ29","TQ30",
"TQ31","TQ32","TQ33","SQ2","TQ34","TQ35","TQ36",
"TQ37","TQ38","TQ39","TQ40","TQ41","TQ42",
"TQ43","TQ44","TQ45","TQ46","TQ47","TQ48")]
tmp.dt.questions$dum = 1
aggregate(. ~ dum,data = tmp.dt.questions, FUN = mean)
tmp.dt.perf = convert_raw_to_correct_ans(current_task_data, allQ)
# const accuracy col
tmp.dt.perf[,
accuracy:= sum(c(TQ1,TQ2,TQ3,TQ4,TQ5,TQ6,
TQ7,TQ8,TQ9,TQ10,TQ11,TQ12,
TQ13,TQ14,TQ15,TQ16,SQ1,TQ17,TQ18,
TQ19,TQ20,TQ21,TQ22,TQ23,TQ24,
TQ25,TQ26,TQ27,TQ28,TQ29,TQ30,
TQ31,TQ32,TQ33,SQ2,TQ34,TQ35,TQ36,
TQ37,TQ38,TQ39,TQ40,TQ41,TQ42,
TQ43,TQ44,TQ45,TQ46,TQ47,TQ48))/length(allQ),
by = worker_id]
# const screener col
tmp.dt.perf[,screener:= as.numeric(SQ1==1 & SQ2==1)]
dt.perf = tmp.dt.perf[,c("worker_id", "CQ1", "CQ2_1", "CQ2_2", "CQ2_3", "CQ2_4",
"CQ3", "CQ4", "CQ5", "time_spent", "accuracy", "screener")]
dt.perf
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_accuracy_threshold:=payment_accuracy_threshold]
# for those who did not complete the task
not_completer_id = current_task_data[touper(Finished) == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_accuracy_threshold:=payment_accuracy_threshold]
# for everyone with identifiable worker id
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, worker_id_found_on_MTurk := as.numeric(worker_id %in% submitted_MTurk_ids)]
dt_status[, task_name := task_name]
dt_status[, task_date := substr(current_task_data[1]$StartDate, 1, 10)]
dt_status[, treatment_payrate := treatment_payrate]
dt_status[, pay_or_not := as.numeric(accuracy >= payment_accuracy_threshold &
screener == 1 &
complete_task == 1 &
worker_id_found_on_MTurk == 1 )]
dt_status
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!!UPDATE
treatment_payrate = 0.55) #!!! UPADTE
source(file = "design1_data_transformation_functions.r")
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!! UPDATE
treatment_payrate = 0.40)
worderIDs_task_status
worderIDs_task_status
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk")]
eligbile_id
filter = eligbile_id %in% existing_ids
sum(filter)
filter
existing_ids
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_ids = read.csv(existing_path)$worker_id
filter = eligbile_id %in% existing_ids
sum(filter)
get_repeater_id_from_database = function(existing_path) {
existing_ids = read.csv(existing_path)$worker_id
existing_ids
}
identify_repeaters_from_database = function(existing_path, current_worker_ids) {
existing_ids = read.csv(existing_path)$worker_id
filter = current_worker_ids %in% existing_ids
repeater_ids = current_worker_ids[filter]
repeater_ids
}
rm(list = ls())
# this is the qualtric csv file you download from qualtric platform, containing survey results
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
qualtric_data_path = "../qualtric_data/20171112_qualtric_results_order1_0.40.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171112_mturk_results_order1_0.40.csv" #!!! UPDATE
# load supporting functions
source(file = "design1_data_transformation_functions.r")
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!! UPDATE
treatment_payrate = 0.40) #!!! UPDATE
# Who pass this HIT enough to be eligible for payment
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk")]
MTurk_worker_id
construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!! UPDATE
treatment_payrate = 0.40)
rm(list = ls())
# this is the qualtric csv file you download from qualtric platform, containing survey results
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
qualtric_data_path = "../qualtric_data/20171112_qualtric_results_order1_0.40.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171112_mturk_results_order1_0.40.csv" #!!! UPDATE
# load supporting functions
source(file = "design1_data_transformation_functions.r")
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!! UPDATE
treatment_payrate = 0.40, #!!! UPDATE
existing_path = "../MTurk_ID_status/worker_status.csv")
# Who pass this HIT enough to be eligible for payment
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk")]
submitted_MTurk_ids = MTurk_worker_id,construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!! UPDATE
treatment_payrate = 0.40, #!!! UPDATE
existing_path = "../MTurk_ID_status/worker_status.csv")
rm(list = ls())
# this is the qualtric csv file you download from qualtric platform, containing survey results
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
qualtric_data_path = "../qualtric_data/20171112_qualtric_results_order1_0.40.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171112_mturk_results_order1_0.40.csv" #!!! UPDATE
# load supporting functions
source(file = "design1_data_transformation_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!! UPDATE
treatment_payrate = 0.40, #!!! UPDATE
existing_path = existing_path)
# Who pass this HIT enough to be eligible for payment
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk")]
rm(list = ls())
# this is the qualtric csv file you download from qualtric platform, containing survey results
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
qualtric_data_path = "../qualtric_data/20171112_qualtric_results_order1_0.40.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171112_mturk_results_order1_0.40.csv" #!!! UPDATE
# load supporting functions
source(file = "design1_data_transformation_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!! UPDATE
treatment_payrate = 0.40, #!!! UPDATE
existing_path = existing_path)
# Who pass this HIT enough to be eligible for payment
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk")]
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_accuracy_threshold:=payment_accuracy_threshold]
completer_repeater_ids = identify_repeaters_from_database(existing_path, dt_completer_status$worker_ids)
dt_completer_status[, repeater := (worker_id %in% completer_repeater_ids)]
dt_completer_status
not_completer_id = current_task_data[toupper(Finished) == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_accuracy_threshold:=payment_accuracy_threshold]
not_completer_repeater_ids = identify_repeaters_from_database(existing_path, dt_not_completer_status$worker_ids)
dt_completer_status[, repeater := (worker_id %in% not_completer_repeater_ids)]
dt_not_completer_status
dt_not_completer_status[,payment_accuracy_threshold:=0.25]
not_completer_repeater_ids = identify_repeaters_from_database(existing_path, dt_not_completer_status$worker_ids)
dt_completer_status[, repeater := (worker_id %in% not_completer_repeater_ids)]
dt_completer_status
dt_status = rbind(dt_completer_status, dt_not_completer_status)
rm(list = ls())
# this is the qualtric csv file you download from qualtric platform, containing survey results
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
qualtric_data_path = "../qualtric_data/20171112_qualtric_results_order1_0.40.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171112_mturk_results_order1_0.40.csv" #!!! UPDATE
# load supporting functions
source(file = "design1_data_transformation_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!! UPDATE
treatment_payrate = 0.40, #!!! UPDATE
existing_path = existing_path)
# Who pass this HIT enough to be eligible for payment
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk")]
eligbile_id
worderIDs_task_status$repeater
worderIDs_task_status
rm(list = ls())
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
# load supporting functions
source(file = "design1_data_transformation_functions.r")
# existing file, be careful when you overwrite
existing_path = "../MTurk_ID_status/worker_status.csv"
# only run in the very first setup, don't touch afterwards
# DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path)
# this is the qualtric csv file you download from qualtric platform, containing survey results
qualtric_data_path = "../qualtric_data/20171112_qualtric_results_order1_0.40.csv" #!!!UPDATE
MTurk_data_path = "../MTurk_data/20171112_mturk_results_order1_0.40.csv" #!!!UPDATE
# construct contents for file update
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!!UPDATE
treatment_payrate = 0.40,
existing_path = existing_path)
worderIDs_task_status
View(worderIDs_task_status)
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk")]
eligbile_id
construct_frame_worderIDs_task_status = function(current_task_data, submitted_MTurk_ids, allQ, payment_accuracy_threshold, task_name, treatment_payrate, existing_path) {
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_accuracy_threshold:=payment_accuracy_threshold]
completer_repeater_ids = identify_repeaters_from_database(existing_path, dt_completer_status$worker_ids)
dt_completer_status[, repeater := as.numeric(worker_id %in% completer_repeater_ids)]
# for those who did not complete the task
not_completer_id = current_task_data[toupper(Finished) == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_accuracy_threshold:=payment_accuracy_threshold]
not_completer_repeater_ids = identify_repeaters_from_database(existing_path, dt_not_completer_status$worker_ids)
dt_not_completer_status[, repeater := as.numeric(worker_id %in% not_completer_repeater_ids)]
# for everyone with identifiable worker id
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, worker_id_found_on_MTurk := as.numeric(worker_id %in% submitted_MTurk_ids)]
dt_status[, task_name := task_name]
dt_status[, task_date := substr(current_task_data[1]$StartDate, 1, 10)]
dt_status[, treatment_payrate := treatment_payrate]
dt_status[, pay_or_not := as.numeric(accuracy >= payment_accuracy_threshold &
screener == 1 &
complete_task == 1 &
worker_id_found_on_MTurk == 1 &
repeater == 0)]
dt_status
}
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!!UPDATE
treatment_payrate = 0.40,
existing_path = existing_path) #!!! UPADTE
View(worderIDs_task_status)
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk")]
eligbile_id
eligbile_id
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status)
all_status = rbind(existing_status, worderIDs_task_status, fill=TRUE)
View(all_status)
write.csv(x = all_status, file = existing_path)
rm(list = ls())
# this is the qualtric csv file you download from qualtric platform, containing survey results
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
qualtric_data_path = "../qualtric_data/20171112_qualtric_results_order1_0.25.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171112_mturk_results_order1_0.25.csv" #!!! UPDATE
# load supporting functions
source(file = "design1_data_transformation_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!! UPDATE
treatment_payrate = 0.25, #!!! UPDATE
existing_path = existing_path)
# Who pass this HIT enough to be eligible for payment
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk", "repeater")]
eligbile_id
worderIDs_task_status$repeater
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status, fill=TRUE)
View(all_status)
rm(list = ls())
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
# load supporting functions
source(file = "design1_data_transformation_functions.r")
# existing file, be careful when you overwrite
existing_path = "../MTurk_ID_status/worker_status.csv"
# only run in the very first setup, don't touch afterwards
# DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path)
# this is the qualtric csv file you download from qualtric platform, containing survey results
qualtric_data_path = "../qualtric_data/20171112_qualtric_results_order1_0.25.csv" #!!!UPDATE
MTurk_data_path = "../MTurk_data/20171112_mturk_results_order1_0.25.csv" #!!!UPDATE
# construct contents for file update
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!!UPDATE
treatment_payrate = 0.25,
existing_path = existing_path) #!!! UPADTE
# CAUTION!
# EXIT EXCEL FILE FIRST
# append content
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status, fill=TRUE)
View(all_status)
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk", "repeater")]
eligbile_id
eligbile_id
View(all_status )
write.csv(x = all_status, file = existing_path)
qualtric_data_path_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
current_task_data_0.10 = get_current_task_data(qualtric_data_path_0.10)
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_0.10 = evaluate_question_perf(current_task_data_0.10, allQ)
question_perf_0.10
#stats summary of accuracies over all questions
summarize_question_accuracy(current_task_data_0.10, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_0.10 = evaluate_worker_perf(current_task_data_0.10, allQ)
worker_perf_0.10
#stats summary of accuracies over all workers
summarize_worker_perf(current_task_data_0.10, allQ)
#number of observations valid for regression
nrow(worker_perf_0.10)
#---------------------------------------------------------------------#
# FOCUS ON A SINGLE CSV FILE CORRESPONDING TO A SINGLE TREATMENT
# ORDER 1, PAYMENT RATE = 0.55
# read in qualtric output csv
qualtric_data_path_0.55 = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv"
current_task_data_0.55 = get_current_task_data(qualtric_data_path_0.55)
# !!! REMOVE REPEATERS : turks who checked out the 0.10 task already
filter = !(current_task_data_0.55$worker_id %in% current_task_data_0.10$worker_id)
# get number of violaters
sum_spillover = sum(!filter)
# weed out the violaters
current_task_data_0.55_weeded = current_task_data_0.55[filter, ]
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_0.55 = evaluate_question_perf(current_task_data_0.55_weeded, allQ)
question_perf_0.55
#stats summary of accuracies over all questions
summarize_question_accuracy(current_task_data_0.55_weeded, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_0.55 = evaluate_worker_perf(current_task_data_0.55_weeded, allQ)
worker_perf_0.55
#stats summary of accuracies over all workers
summarize_worker_perf(current_task_data_0.55_weeded, allQ)
#number of observations valid for regression
nrow(worker_perf_0.55)
#---------------------------------------------------------------------#
# FOCUS ON A SINGLE CSV FILE CORRESPONDING TO A SINGLE TREATMENT
# ORDER 1, PAYMENT RATE = 0.40
# Please fill in (reuse above code block)
# read in qualtric output csv
qualtric_data_path_0.40 = "../qualtric_data/20171112_qualtric_results_order1_0.40.csv"
current_task_data_0.40 = get_current_task_data(qualtric_data_path_0.40)
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_0.40 = evaluate_question_perf(current_task_data_0.40, allQ)
question_perf_0.40
#stats summary of accuracies over all questions
summarize_question_accuracy(current_task_data_0.40, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_0.40 = evaluate_worker_perf(current_task_data_0.40, allQ)
worker_perf_0.40
#stats summary of accuracies over all workers
summarize_worker_perf(current_task_data_0.40, allQ)
#number of observations valid for regression
nrow(worker_perf_0.40)
nrow(worker_perf_0.55)
summarize_worker_perf(current_task_data_0.55_weeded, allQ)
nrow(worker_perf_0.40)
qualtric_data_path_0.25 = "../qualtric_data/20171112_qualtric_results_order1_0.25.csv"
current_task_data_0.25 = get_current_task_data(qualtric_data_path_0.25)
filter = !(current_task_data_0.25$worker_id %in% current_task_data_0.40$worker_id)
sum_spillover = sum(!filter)
sum_spillover
current_task_data_0.25_weeded = current_task_data_0.25[filter, ]
question_perf_0.25 = evaluate_question_perf(current_task_data_0.25_weeded, allQ)
question_perf_0.25
summarize_question_accuracy(current_task_data_0.25_weeded, allQ)
worker_perf_0.25 = evaluate_worker_perf(current_task_data_0.25_weeded, allQ)
worker_perf_0.25
summarize_worker_perf(current_task_data_0.25_weeded, allQ)
nrow(worker_perf_0.25)
summarize_worker_perf(current_task_data_0.40, allQ)
nrow(worker_perf_0.25)
nrow(worker_perf_0.10)
summarize_worker_perf(current_task_data_0.10, allQ)
summarize_worker_perf(current_task_data_0.55_weeded, allQ)
summarize_worker_perf(current_task_data_0.40, allQ)
summarize_worker_perf(current_task_data_0.25_weeded, allQ)
worker_perf_0.10$treatment = 0.10
worker_perf_0.55$treatment = 0.55
worker_perf_0.40$treatment = 0.40
worker_perf_0.25$treatment = 0.25
regr_table = rbind(worker_perf_0.10, worker_perf_0.25, worker_perf_0.40, worker_perf_0.55) # ONCE ALL FOUR POSTINGS ARE DONE
# our covariates are CQ1, CQ2_3, CQ3
# converting some data type of some covariates
regr_table$CQ1 = as.factor(regr_table$CQ1)
regr_table$CQ2_3 = as.numeric(regr_table$CQ2_3)
regr_table$CQ3 = as.factor(regr_table$CQ3)
CQ1_1 = regr_table$CQ1 == "a lot less than half"
CQ1_2 = regr_table$CQ1 == "around half"
CQ1_3 = regr_table$CQ1 == "a lot more than half"
cov_regr_CQ1_1= lm(CQ1_1 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ1_1, vcov(cov_regr_CQ1_1))
cov_regr_CQ1_2= lm(CQ1_2 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ1_2, vcov(cov_regr_CQ1_2))
cov_regr_CQ1_3= lm(CQ1_3 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ1_3, vcov(cov_regr_CQ1_3))
# Preference to work with images question
cov_regr_CQ2_3= lm(CQ2_3 ~ treatment, data = regr_table)
lmtest::coeftest(cov_regr_CQ2_3, vcov(cov_regr_CQ2_3))
CQ3_1 = regr_table$CQ3 == "Yes"
CQ3_2 = regr_table$CQ3 == "No"
CQ3_3 = regr_table$CQ3 == "Maybe"
cov_regr_CQ3_1= lm(CQ3_1 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ3_1, vcov(cov_regr_CQ3_1))
cov_regr_CQ3_2= lm(CQ3_2 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ3_2, vcov(cov_regr_CQ3_2))
cov_regr_CQ3_3= lm(CQ3_3 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ3_3, vcov(cov_regr_CQ3_3))
car::leveneTest(worker_perf_0.10$accuracy,worker_perf_0.55$accuracy,center=median)
# 2 sample independent t-test
t.test(worker_perf_0.10$accuracy,
worker_perf_0.55$accuracy,
alternative = "two.sided", var.equal = TRUE)
regr1 = lm(accuracy ~ treatment, data = regr_table)
regr2 = lm(accuracy ~ treatment + CQ1 + CQ2_3 + CQ3, data = regr_table)
summary(regr1)
summary(regr2)
lmtest::coeftest(regr1, vcov(regr1))
lmtest::coeftest(regr2, vcov(regr2))
hist(regr_table$accuracy)
hist(regr_table[treatment == 0.55,]$accuracy)
hist(regr_table[treatment == 0.10,]$accuracy)
hist(regr_table[treatment == 0.25,]$accuracy)
hist(regr_table[treatment == 0.40,]$accuracy)
regr_table
