# summarize_question_accuracy(current_task_data_d1o2_0.40, allQ)
#stats summary of accuracies over all workers
smry_040 = summarize_worker_perf(current_task_data_d1o2_0.40, allQ)
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o2_0.25_weeded, allQ)
#stats summary of accuracies over all workers
smry_025=summarize_worker_perf(current_task_data_d1o2_0.25_weeded, allQ)
avg_time_025 = mean(as.numeric(regr_table_d1o2[regr_table_d1o2$treatment == 0.25,]$time_spent))/60
avg_time_010= mean(as.numeric(regr_table_d1o2[regr_table_d1o2$treatment == 0.10,]$time_spent))/60
avg_time_040 = mean(as.numeric(regr_table_d1o2[regr_table_d1o2$treatment == 0.40,]$time_spent))/60
avg_time_055= mean(as.numeric(regr_table_d1o2[regr_table_d1o2$treatment == 0.55,]$time_spent))/60
d1o1_summary = data.frame(Name=c("Design 1", "Design 1", "Design 1", "Design 1"), Order=c(2,2,2,2), Treatmet=c(0.1,0.25, 0.40, 0.55), N=c(nrow(worker_perf_d1o2_0.10),nrow(worker_perf_d1o2_0.25),nrow(worker_perf_d1o2_0.40),nrow(worker_perf_d1o2_0.55)), TotalTimeTaken=c("check","check", "check", "check"), AvgTimePerTaskMin = c(avg_time_010,avg_time_025,avg_time_040,avg_time_055), AccuracyMean=c(smry_010$mean,smry_025$mean,smry_040$mean,smry_055$mean), AccuracySE=c(smry_010$se,smry_025$se,smry_040$se,smry_055$se))
knitr::kable(d1o1_summary, "markdown")
hist(regr_table_d1o2$accuracy)
# load packages
library(foreign)
library(sandwich)
library(lmtest)
library(data.table)
library(multiwayvcov)
# load supporting functions
# setwd("/home/fred/Field_Experiment_Human_Image_Classification/code")
setwd("D:/MIDS/W241_1_Experiments_Causality/project/Field_Experiment_Human_Image_Classification/code")
# setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design1_data_transformation_functions.r")
source(file = "design1_data_analysis_functions.r")
# source(file = "pilot_data_transformation_functions.r")
d2df = data.frame(N=c("CQ1","CQ2","CQ3","CQ4", "CQ5"),CovariateQuestion=c("What portion of your friends own pets?", "Please rank your preferences to work with the following media", "Have you ever lived with (or planned to live with) any dogs in your household?", "On average, how many tasks on AMT do you complete every week?", "Do you use LinkedIn?"))
knitr::kable(d2df, "markdown")
d2df = data.frame(Wave=c("A", "B", "C", "D"), Step_1_Pay=c(0,0,0,0.15), Step_2_Pay=c(0,0,0.15,0.15), Step_3_Pay=c(0,0.15,0.15,0.15))
knitr::kable(d2df, "markdown")
# read in qualtric output csv
qualtric_pilot_data_path_0.25 = "../qualtric_data/20171028_qualtric_results_pilot_0.25.csv"
current_task_pilot_data_0.25 = get_current_task_data(qualtric_pilot_data_path_0.25)
qualtric_pilot_data_path_0.10 = "../qualtric_data/20171028_qualtric_results_pilot_0.10.csv"
current_task_pilot_data_0.10 = get_current_task_data(qualtric_pilot_data_path_0.10)
#evaluate accuracy per worker, return a table per worker
worker_perf_pilot_0.25 = evaluate_worker_perf(current_task_pilot_data_0.25, allQ)
worker_perf_pilot_0.10 = evaluate_worker_perf(current_task_pilot_data_0.10, allQ)
# pool the data from different treatments together
worker_perf_pilot_0.25$treatment = 0.25
worker_perf_pilot_0.10$treatment = 0.10
regr_table_pilot = rbind(worker_perf_pilot_0.10, worker_perf_pilot_0.25)
# our covariates are CQ1, CQ2_3, CQ3
# converting some data type of some covariates
regr_table_pilot$CQ1 = as.factor(regr_table_pilot$CQ1)
regr_table_pilot$CQ2_3 = as.numeric(regr_table_pilot$CQ2_3)
regr_table_pilot$CQ3 = as.factor(regr_table_pilot$CQ3)
head(regr_table_pilot)
summary(regr_table_pilot)
smry_025 = summarize_worker_perf(current_task_pilot_data_0.25, allQ)
smry_010 = summarize_worker_perf(current_task_pilot_data_0.10, allQ)
avg_time_025 = mean(as.numeric(regr_table_pilot[regr_table_pilot$treatment == 0.25,]$time_spent))/60
avg_time_010= mean(as.numeric(regr_table_pilot[regr_table_pilot$treatment == 0.10,]$time_spent))/60
pilot_summary = data.frame(Name=c("Pilot", "Pilot"), Run=c(1,2), Treatmet=c(0.1,0.25), N=c(nrow(worker_perf_pilot_0.10),nrow(worker_perf_pilot_0.25)),TotalTimeTaken=c("2h 30min","1h 20min"), AvgTimePerTaskMin = c(avg_time_010,avg_time_025), AccuracyMean=c(smry_010$mean,smry_025$mean), AccuracySE=c(smry_010$se,smry_025$se))
knitr::kable(pilot_summary, "markdown")
hist(regr_table_pilot$accuracy)
# hist(regr_table_pilot[treatment == 0.25,]$accuracy)
# hist(regr_table_pilot[treatment == 0.10,]$accuracy)
# Dog friends question
CQ1_1 = regr_table_pilot$CQ1 == "a lot less than half"
CQ1_2 = regr_table_pilot$CQ1 == "around half"
CQ1_3 = regr_table_pilot$CQ1 == "a lot more than half"
cov_regr_CQ1_1= lm(CQ1_1 ~ regr_table_pilot$treatment)
cov_regr_CQ1_2= lm(CQ1_2 ~ regr_table_pilot$treatment)
cov_regr_CQ1_3= lm(CQ1_3 ~ regr_table_pilot$treatment)
# Preference to work with images question
cov_regr_CQ2_3= lm(CQ2_3 ~ treatment, data = regr_table_pilot)
# Lived with or planned to own a dog
CQ3_1 = regr_table_pilot$CQ3 == "Yes"
CQ3_2 = regr_table_pilot$CQ3 == "No"
CQ3_3 = regr_table_pilot$CQ3 == "Maybe"
cov_regr_CQ3_1= lm(CQ3_1 ~ regr_table_pilot$treatment)
cov_regr_CQ3_2= lm(CQ3_2 ~ regr_table_pilot$treatment)
cov_regr_CQ3_3= lm(CQ3_3 ~ regr_table_pilot$treatment)
car::leveneTest(worker_perf_pilot_0.10$accuracy,worker_perf_pilot_0.25$accuracy,center=median)
# 2 sample independent t-test
t.test(worker_perf_pilot_0.10$accuracy,
worker_perf_pilot_0.25$accuracy,
alternative = "two.sided", var.equal = TRUE)
regr1_simple_pilot = lm(accuracy ~ treatment, data = regr_table_pilot)
regr2_simple_pilot = lm(accuracy ~ treatment + CQ1 + CQ2_3 + CQ3, data = regr_table_pilot)
coeftest(regr1_pilot, vcov(regr1_pilot))
regr1_simple_pilot = lm(accuracy ~ treatment, data = regr_table_pilot)
regr2_simple_pilot = lm(accuracy ~ treatment + CQ1 + CQ2_3 + CQ3, data = regr_table_pilot)
coeftest(regr1_simple_pilot, vcov(regr1_pilot))
regr1_simple_pilot = lm(accuracy ~ treatment, data = regr_table_pilot)
regr2_simple_pilot = lm(accuracy ~ treatment + CQ1 + CQ2_3 + CQ3, data = regr_table_pilot)
coeftest(regr1_simple_pilot, vcov(regr1_simple_pilot))
coeftest(regr2_simple_pilot, vcov(regr2_simple_pilot))
# DESIGN 1 ORDER 1
# read in qualtric output csv
qualtric_data_path_d1o1_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
current_task_data_d1o1_0.10 = get_current_task_data(qualtric_data_path_d1o1_0.10)
qualtric_data_path_d1o1_0.55 = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv"
current_task_data_d1o1_0.55 = get_current_task_data(qualtric_data_path_d1o1_0.55)
qualtric_data_path_d1o1_0.40 = "../qualtric_data/20171112_qualtric_results_order1_0.40.csv"
current_task_data_d1o1_0.40 = get_current_task_data(qualtric_data_path_d1o1_0.40)
qualtric_data_path_d1o1_0.25 = "../qualtric_data/20171112_qualtric_results_order1_0.25.csv"
current_task_data_d1o1_0.25 = get_current_task_data(qualtric_data_path_d1o1_0.25)
# !!! REMOVE REPEATERS : turks who checked out the 0.10 task already
filter = !(current_task_data_d1o1_0.55$worker_id %in% current_task_data_d1o1_0.10$worker_id)
# get number of violaters
sum_spillover = sum(!filter)
# weed out the violaters
current_task_data_d1o1_0.55_weeded = current_task_data_d1o1_0.55[filter, ]
# !!! REMOVE REPEATERS : turks who checked out the 0.40 task already
filter = !(current_task_data_d1o1_0.25$worker_id %in% current_task_data_d1o1_0.40$worker_id)
# get number of violaters
sum_spillover = sum(!filter)
# weed out the violaters
current_task_data_d1o1_0.25_weeded = current_task_data_d1o1_0.25[filter, ]
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_d1o1_0.10 = evaluate_question_perf(current_task_data_d1o1_0.10, allQ)
question_perf_d1o1_0.55 = evaluate_question_perf(current_task_data_d1o1_0.55_weeded, allQ)
question_perf_d1o1_0.40 = evaluate_question_perf(current_task_data_d1o1_0.40, allQ)
question_perf_d1o1_0.25 = evaluate_question_perf(current_task_data_d1o1_0.25_weeded, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_d1o1_0.10 = evaluate_worker_perf(current_task_data_d1o1_0.10, allQ)
worker_perf_d1o1_0.55 = evaluate_worker_perf(current_task_data_d1o1_0.55_weeded, allQ)
worker_perf_d1o1_0.40 = evaluate_worker_perf(current_task_data_d1o1_0.40, allQ)
worker_perf_d1o1_0.25 = evaluate_worker_perf(current_task_data_d1o1_0.25_weeded, allQ)
# pool the data from different treatments together
worker_perf_d1o1_0.10$treatment = 0.10
worker_perf_d1o1_0.55$treatment = 0.55
worker_perf_d1o1_0.40$treatment = 0.40
worker_perf_d1o1_0.25$treatment = 0.25
regr_table_d1o1 = rbind(worker_perf_d1o1_0.10, worker_perf_d1o1_0.25, worker_perf_d1o1_0.40, worker_perf_d1o1_0.55)
# our covariates are CQ1, CQ2_3, CQ3
# converting some data type of some covariates
regr_table_d1o1$CQ1 = as.factor(regr_table_d1o1$CQ1)
regr_table_d1o1$CQ2_3 = as.numeric(regr_table_d1o1$CQ2_3)
regr_table_d1o1$CQ3 = as.factor(regr_table_d1o1$CQ3)
# POOLING THREE (0.25, 0.40, 0.55) CSV FILES FROM DIFFERENT TREATMENTS
# pool the data from different treatments together
regr_table_d1o1_exclude0.10 = rbind(worker_perf_d1o1_0.25, worker_perf_d1o1_0.40, worker_perf_d1o1_0.55)
# our covariates are CQ1, CQ2_3, CQ3
# converting some data type of some covariates
regr_table_d1o1_exclude0.10$CQ1 = as.factor(regr_table_d1o1_exclude0.10$CQ1)
regr_table_d1o1_exclude0.10$CQ2_3 = as.numeric(regr_table_d1o1_exclude0.10$CQ2_3)
regr_table_d1o1_exclude0.10$CQ3 = as.factor(regr_table_d1o1_exclude0.10$CQ3)
# DESIGN 1 ORDER 2
# read in qualtric output csv
qualtric_data_path_d1o2_0.40 = "../qualtric_data/20171118_qualtric_results_order2_0.40.csv"
current_task_data_d1o2_0.40 = get_current_task_data(qualtric_data_path_d1o2_0.40)
qualtric_data_path_d1o2_0.25 = "../qualtric_data/20171118_qualtric_results_order2_0.25.csv"
current_task_data_d1o2_0.25 = get_current_task_data(qualtric_data_path_d1o2_0.25)
qualtric_data_path_d1o2_0.55 = "../qualtric_data/20171119_qualtric_results_order2_0.55.csv"
current_task_data_d1o2_0.55 = get_current_task_data(qualtric_data_path_d1o2_0.55)
qualtric_data_path_d1o2_0.10 = "../qualtric_data/20171119_qualtric_results_order2_0.10.csv"
current_task_data_d1o2_0.10 = get_current_task_data(qualtric_data_path_d1o2_0.10)
# !!! REMOVE REPEATERS : turks who checked out the 0.10 task already
filter = !(current_task_data_d1o2_0.25$worker_id %in% current_task_data_d1o2_0.40$worker_id)
# get number of violaters
sum_spillover = sum(!filter)
# weed out the violaters
current_task_data_d1o2_0.25_weeded = current_task_data_d1o2_0.25[filter, ]
# !!! REMOVE REPEATERS : turks who checked out the 0.40 task already
filter = !(current_task_data_d1o2_0.10$worker_id %in% current_task_data_d1o2_0.55$worker_id)
# get number of violaters
sum_spillover = sum(!filter)
# weed out the violaters
current_task_data_d1o2_0.10_weeded = current_task_data_d1o2_0.10[filter, ]
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_d1o2_0.10 = evaluate_question_perf(current_task_data_d1o2_0.10_weeded, allQ)
question_perf_d1o2_0.55 = evaluate_question_perf(current_task_data_d1o2_0.55, allQ)
question_perf_d1o2_0.40 = evaluate_question_perf(current_task_data_d1o2_0.40, allQ)
question_perf_d1o2_0.25 = evaluate_question_perf(current_task_data_d1o2_0.25_weeded, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_d1o2_0.10 = evaluate_worker_perf(current_task_data_d1o2_0.10_weeded, allQ)
worker_perf_d1o2_0.55 = evaluate_worker_perf(current_task_data_d1o2_0.55, allQ)
worker_perf_d1o2_0.40 = evaluate_worker_perf(current_task_data_d1o2_0.40, allQ)
worker_perf_d1o2_0.25 = evaluate_worker_perf(current_task_data_d1o2_0.25_weeded, allQ)
# pool the data from different treatments together
worker_perf_d1o2_0.10$treatment = 0.10
worker_perf_d1o2_0.55$treatment = 0.55
worker_perf_d1o2_0.40$treatment = 0.40
worker_perf_d1o2_0.25$treatment = 0.25
regr_table_d1o2 = rbind(worker_perf_d1o2_0.10, worker_perf_d1o2_0.25, worker_perf_d1o2_0.40, worker_perf_d1o2_0.55)
# our covariates are CQ1, CQ2_3, CQ3
# converting some data type of some covariates
regr_table_d1o2$CQ1 = as.factor(regr_table_d1o2$CQ1)
regr_table_d1o2$CQ2_3 = as.numeric(regr_table_d1o2$CQ2_3)
regr_table_d1o2$CQ3 = as.factor(regr_table_d1o2$CQ3)
# POOLING THREE (0.25, 0.40, 0.55) CSV FILES FROM DIFFERENT TREATMENTS
# pool the data from different treatments together
regr_table_d1o2_exclude0.10 = rbind(worker_perf_d1o2_0.25, worker_perf_d1o2_0.40, worker_perf_d1o2_0.55)
# our covariates are CQ1, CQ2_3, CQ3
# converting some data type of some covariates
regr_table_d1o2_exclude0.10$CQ1 = as.factor(regr_table_d1o2_exclude0.10$CQ1)
regr_table_d1o2_exclude0.10$CQ2_3 = as.numeric(regr_table_d1o2_exclude0.10$CQ2_3)
regr_table_d1o2_exclude0.10$CQ3 = as.factor(regr_table_d1o2_exclude0.10$CQ3)
# keep only one or a combined one
head(regr_table_d1o1)
head(regr_table_d1o2)
# DESIGN 1 ORDER 1
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o1_0.10, allQ)
#stats summary of accuracies over all workers
smry_010_d1o1 = summarize_worker_perf(current_task_data_d1o1_0.10, allQ)
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o1_0.55_weeded, allQ)
#stats summary of accuracies over all workers
smry_055_d1o1 = summarize_worker_perf(current_task_data_d1o1_0.55_weeded, allQ)
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o1_0.40, allQ)
#stats summary of accuracies over all workers
smry_040_d1o1 = summarize_worker_perf(current_task_data_d1o1_0.40, allQ)
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o1_0.25_weeded, allQ)
#stats summary of accuracies over all workers
smry_025_d1o1 = summarize_worker_perf(current_task_data_d1o1_0.25_weeded, allQ)
avg_time_025_d1o1 = mean(as.numeric(regr_table_d1o1[regr_table_d1o1$treatment == 0.25,]$time_spent))/60
avg_time_010_d1o1 = mean(as.numeric(regr_table_d1o1[regr_table_d1o1$treatment == 0.10,]$time_spent))/60
avg_time_040_d1o1 = mean(as.numeric(regr_table_d1o1[regr_table_d1o1$treatment == 0.40,]$time_spent))/60
avg_time_055_d1o1 = mean(as.numeric(regr_table_d1o1[regr_table_d1o1$treatment == 0.55,]$time_spent))/60
d1o1_summary = data.frame(
Name=c("Design 1", "Design 1", "Design 1", "Design 1"),
Order=c(1,1,1,1),
Treatmet=c(0.1,0.25, 0.40, 0.55),
N=c(nrow(worker_perf_d1o1_0.10),nrow(worker_perf_d1o1_0.25),nrow(worker_perf_d1o1_0.40),nrow(worker_perf_d1o1_0.55)),
TotalTimeTaken=c("check","check", "check", "check"),
AvgTimePerTaskMin = c(avg_time_010_d1o1,avg_time_025_d1o1,avg_time_040_d1o1,avg_time_055_d1o1),
AccuracyMean=c(smry_010_d1o1$mean,smry_025_d1o1$mean,smry_040_d1o1$mean,smry_055_d1o1$mean),
AccuracySE=c(smry_010_d1o1$se,smry_025_d1o1$se,smry_040_d1o1$se,smry_055_d1o1$se))
knitr::kable(d1o1_summary, "markdown")
# DESIGN 1 ORDER 2
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o2_0.10_weeded, allQ)
#stats summary of accuracies over all workers
smry_010_d1o2 = summarize_worker_perf(current_task_data_d1o2_0.10_weeded, allQ)
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o2_0.55, allQ)
#stats summary of accuracies over all workers
smry_055_d1o2 = summarize_worker_perf(current_task_data_d1o2_0.55, allQ)
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o2_0.40, allQ)
#stats summary of accuracies over all workers
smry_040_d1o2 = summarize_worker_perf(current_task_data_d1o2_0.40, allQ)
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o2_0.25_weeded, allQ)
#stats summary of accuracies over all workers
smry_025_d1o2=summarize_worker_perf(current_task_data_d1o2_0.25_weeded, allQ)
avg_time_025_d1o2 = mean(as.numeric(regr_table_d1o2[regr_table_d1o2$treatment == 0.25,]$time_spent))/60
avg_time_010_d1o2 = mean(as.numeric(regr_table_d1o2[regr_table_d1o2$treatment == 0.10,]$time_spent))/60
avg_time_040_d1o2 = mean(as.numeric(regr_table_d1o2[regr_table_d1o2$treatment == 0.40,]$time_spent))/60
avg_time_055_d1o2 = mean(as.numeric(regr_table_d1o2[regr_table_d1o2$treatment == 0.55,]$time_spent))/60
# group these somehow
hist(regr_table_d1o1$accuracy)
hist(regr_table_d1o1[treatment == 0.55,]$accuracy)
hist(regr_table_d1o1[treatment == 0.10,]$accuracy)
hist(regr_table_d1o1[treatment == 0.25,]$accuracy)
hist(regr_table_d1o1[treatment == 0.40,]$accuracy)
d1o1_summary = data.frame(
Name=c("Design 1", "Design 1", "Design 1", "Design 1"),
Order=c(2,2,2,2),
Treatmet=c(0.1,0.25, 0.40, 0.55),
N=c(nrow(worker_perf_d1o2_0.10),nrow(worker_perf_d1o2_0.25),nrow(worker_perf_d1o2_0.40),nrow(worker_perf_d1o2_0.55)),
TotalTimeTaken=c("check","check", "check", "check"),
AvgTimePerTaskMin = c(avg_time_010_d1o2,avg_time_025_d1o2,avg_time_040_d1o2,avg_time_055_d1o2),
AccuracyMean=c(smry_010_d1o2$mean,smry_025_d1o2$mean,smry_040_d1o2$mean,smry_055_d1o2$mean),
AccuracySE=c(smry_010_d1o2$se,smry_025_d1o2$se,smry_040_d1o2$se,smry_055_d1o2$se))
knitr::kable(d1o1_summary, "markdown")
d1_summary = data.frame(
Name=c("Design 1", "Design 1", "Design 1", "Design 1","Design 1", "Design 1", "Design 1", "Design 1"),
Order=c(1,1,1,1,2,2,2,2),
Treatmet=c(0.1,0.25, 0.40, 0.55,0.1,0.25, 0.40, 0.55),
N=c(nrow(worker_perf_d1o1_0.10),nrow(worker_perf_d1o1_0.25),nrow(worker_perf_d1o1_0.40),nrow(worker_perf_d1o1_0.55),nrow(worker_perf_d1o2_0.10),nrow(worker_perf_d1o2_0.25),nrow(worker_perf_d1o2_0.40),nrow(worker_perf_d1o2_0.55)),
TotalTimeTaken=c("check","check", "check", "check","check","check", "check", "check"),
AvgTimePerTaskMin = c(avg_time_010_d1o1,avg_time_025_d1o1,avg_time_040_d1o1,avg_time_055_d1o1,avg_time_010_d1o2,avg_time_025_d1o2,avg_time_040_d1o2,avg_time_055_d1o2),
AccuracyMean=c(smry_010_d1o1$mean,smry_025_d1o1$mean,smry_040_d1o1$mean,smry_055_d1o1$mean,smry_010_d1o2$mean,smry_025_d1o2$mean,smry_040_d1o2$mean,smry_055_d1o2$mean),
AccuracySE=c(smry_010_d1o1$se,smry_025_d1o1$se,smry_040_d1o1$se,smry_055_d1o1$se,smry_010_d1o2$se,smry_025_d1o2$se,smry_040_d1o2$se,smry_055_d1o2$se))
knitr::kable(d1o1_summary, "markdown")
# d1o1_summary = data.frame(
#   Name=c("Design 1", "Design 1", "Design 1", "Design 1"),
#   Order=c(2,2,2,2),
#   Treatmet=c(0.1,0.25, 0.40, 0.55),
#   N=c(nrow(worker_perf_d1o2_0.10),nrow(worker_perf_d1o2_0.25),nrow(worker_perf_d1o2_0.40),nrow(worker_perf_d1o2_0.55)),
#   TotalTimeTaken=c("check","check", "check", "check"),
#   AvgTimePerTaskMin = c(avg_time_010_d1o2,avg_time_025_d1o2,avg_time_040_d1o2,avg_time_055_d1o2),
#   AccuracyMean=c(smry_010_d1o2$mean,smry_025_d1o2$mean,smry_040_d1o2$mean,smry_055_d1o2$mean),
#   AccuracySE=c(smry_010_d1o2$se,smry_025_d1o2$se,smry_040_d1o2$se,smry_055_d1o2$se))
# knitr::kable(d1o1_summary, "markdown")
d1_summary = data.frame(
Name=c("Design 1", "Design 1", "Design 1", "Design 1","Design 1", "Design 1", "Design 1", "Design 1"),
Order=c(1,1,1,1,2,2,2,2),
Treatmet=c(0.1,0.25, 0.40, 0.55,0.1,0.25, 0.40, 0.55),
N=c(nrow(worker_perf_d1o1_0.10),nrow(worker_perf_d1o1_0.25),nrow(worker_perf_d1o1_0.40),nrow(worker_perf_d1o1_0.55),nrow(worker_perf_d1o2_0.10),nrow(worker_perf_d1o2_0.25),nrow(worker_perf_d1o2_0.40),nrow(worker_perf_d1o2_0.55)),
TotalTimeTaken=c("check","check", "check", "check","check","check", "check", "check"),
AvgTimePerTaskMin = c(avg_time_010_d1o1,avg_time_025_d1o1,avg_time_040_d1o1,avg_time_055_d1o1,avg_time_010_d1o2,avg_time_025_d1o2,avg_time_040_d1o2,avg_time_055_d1o2),
AccuracyMean=c(smry_010_d1o1$mean,smry_025_d1o1$mean,smry_040_d1o1$mean,smry_055_d1o1$mean,smry_010_d1o2$mean,smry_025_d1o2$mean,smry_040_d1o2$mean,smry_055_d1o2$mean),
AccuracySE=c(smry_010_d1o1$se,smry_025_d1o1$se,smry_040_d1o1$se,smry_055_d1o1$se,smry_010_d1o2$se,smry_025_d1o2$se,smry_040_d1o2$se,smry_055_d1o2$se))
knitr::kable(d1_summary, "markdown")
# d1o1_summary = data.frame(
#   Name=c("Design 1", "Design 1", "Design 1", "Design 1"),
#   Order=c(2,2,2,2),
#   Treatmet=c(0.1,0.25, 0.40, 0.55),
#   N=c(nrow(worker_perf_d1o2_0.10),nrow(worker_perf_d1o2_0.25),nrow(worker_perf_d1o2_0.40),nrow(worker_perf_d1o2_0.55)),
#   TotalTimeTaken=c("check","check", "check", "check"),
#   AvgTimePerTaskMin = c(avg_time_010_d1o2,avg_time_025_d1o2,avg_time_040_d1o2,avg_time_055_d1o2),
#   AccuracyMean=c(smry_010_d1o2$mean,smry_025_d1o2$mean,smry_040_d1o2$mean,smry_055_d1o2$mean),
#   AccuracySE=c(smry_010_d1o2$se,smry_025_d1o2$se,smry_040_d1o2$se,smry_055_d1o2$se))
# knitr::kable(d1o1_summary, "markdown")
d1_summary = data.frame(
Name=c("Design 1", "Design 1", "Design 1", "Design 1","Design 1", "Design 1", "Design 1", "Design 1"),
Order=c(1,1,1,1,2,2,2,2),
Treatmet=c(0.1,0.25, 0.40, 0.55,0.1,0.25, 0.40, 0.55),
N=c(nrow(worker_perf_d1o1_0.10),nrow(worker_perf_d1o1_0.25),nrow(worker_perf_d1o1_0.40),nrow(worker_perf_d1o1_0.55),nrow(worker_perf_d1o2_0.10),nrow(worker_perf_d1o2_0.25),nrow(worker_perf_d1o2_0.40),nrow(worker_perf_d1o2_0.55)),
TotalTimeTaken=c("11h 15min","3h 15min", "0h 40min", "0h 40min","15h 20min","2h 40min", "2h 20min", "3h 10min"),
AvgTimePerTaskMin = c(avg_time_010_d1o1,avg_time_025_d1o1,avg_time_040_d1o1,avg_time_055_d1o1,avg_time_010_d1o2,avg_time_025_d1o2,avg_time_040_d1o2,avg_time_055_d1o2),
AccuracyMean=c(smry_010_d1o1$mean,smry_025_d1o1$mean,smry_040_d1o1$mean,smry_055_d1o1$mean,smry_010_d1o2$mean,smry_025_d1o2$mean,smry_040_d1o2$mean,smry_055_d1o2$mean),
AccuracySE=c(smry_010_d1o1$se,smry_025_d1o1$se,smry_040_d1o1$se,smry_055_d1o1$se,smry_010_d1o2$se,smry_025_d1o2$se,smry_040_d1o2$se,smry_055_d1o2$se))
knitr::kable(d1_summary, "markdown")
#setwd("D:/MIDS/W241_1_Experiments_Causality/project/Field_Experiment_Human_Image_Classification/code")
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/Field_Experiment_Human_Image_Classification/code")
source(file = "design1_data_transformation_functions.r")
source(file = "design1_data_analysis_functions.r")
#setwd("D:/MIDS/W241_1_Experiments_Causality/project/Field_Experiment_Human_Image_Classification/code")
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/Field_Experiment_Human_Image_Classification/code")
source(file = "design1_data_transformation_functions.r")
source(file = "design1_data_analysis_functions.r")
source(file = "design2_data_transformation_functions.r")
source(file = "design2_data_analysis_functions.r")
d2df = data.frame(Wave=c("A", "B", "C", "D"), Step_1_Pay=c(0,0,0,0.15), Step_2_Pay=c(0,0,0.15,0.15), Step_3_Pay=c(0,0.15,0.15,0.15))
knitr::kable(d2df, "markdown")
# TODO Hide this
# DESIGN 1 ORDER 1
# read in qualtric output csv
qualtric_data_path_d1o1_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
current_task_data_d1o1_0.10 = get_current_task_data(qualtric_data_path_d1o1_0.10)
qualtric_data_path_d1o1_0.55 = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv"
current_task_data_d1o1_0.55 = get_current_task_data(qualtric_data_path_d1o1_0.55)
qualtric_data_path_d1o1_0.40 = "../qualtric_data/20171112_qualtric_results_order1_0.40.csv"
current_task_data_d1o1_0.40 = get_current_task_data(qualtric_data_path_d1o1_0.40)
qualtric_data_path_d1o1_0.25 = "../qualtric_data/20171112_qualtric_results_order1_0.25.csv"
current_task_data_d1o1_0.25 = get_current_task_data(qualtric_data_path_d1o1_0.25)
# !!! REMOVE REPEATERS : turks who checked out the 0.10 task already
filter = !(current_task_data_d1o1_0.55$worker_id %in% current_task_data_d1o1_0.10$worker_id)
# get number of violaters
sum_spillover = sum(!filter)
# weed out the violaters
current_task_data_d1o1_0.55_weeded = current_task_data_d1o1_0.55[filter, ]
# !!! REMOVE REPEATERS : turks who checked out the 0.40 task already
filter = !(current_task_data_d1o1_0.25$worker_id %in% current_task_data_d1o1_0.40$worker_id)
# get number of violaters
sum_spillover = sum(!filter)
# weed out the violaters
current_task_data_d1o1_0.25_weeded = current_task_data_d1o1_0.25[filter, ]
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_d1o1_0.10 = evaluate_question_perf(current_task_data_d1o1_0.10, allQ)
question_perf_d1o1_0.55 = evaluate_question_perf(current_task_data_d1o1_0.55_weeded, allQ)
question_perf_d1o1_0.40 = evaluate_question_perf(current_task_data_d1o1_0.40, allQ)
question_perf_d1o1_0.25 = evaluate_question_perf(current_task_data_d1o1_0.25_weeded, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_d1o1_0.10 = evaluate_worker_perf(current_task_data_d1o1_0.10, allQ)
worker_perf_d1o1_0.55 = evaluate_worker_perf(current_task_data_d1o1_0.55_weeded, allQ)
worker_perf_d1o1_0.40 = evaluate_worker_perf(current_task_data_d1o1_0.40, allQ)
worker_perf_d1o1_0.25 = evaluate_worker_perf(current_task_data_d1o1_0.25_weeded, allQ)
# pool the data from different treatments together
worker_perf_d1o1_0.10$treatment = 0.10
worker_perf_d1o1_0.55$treatment = 0.55
worker_perf_d1o1_0.40$treatment = 0.40
worker_perf_d1o1_0.25$treatment = 0.25
regr_table_d1o1 = rbind(worker_perf_d1o1_0.10, worker_perf_d1o1_0.25, worker_perf_d1o1_0.40, worker_perf_d1o1_0.55)
# our covariates are CQ1, CQ2_3, CQ3
# converting some data type of some covariates
regr_table_d1o1$CQ1 = as.factor(regr_table_d1o1$CQ1)
regr_table_d1o1$CQ2_3 = as.numeric(regr_table_d1o1$CQ2_3)
regr_table_d1o1$CQ3 = as.factor(regr_table_d1o1$CQ3)
# POOLING THREE (0.25, 0.40, 0.55) CSV FILES FROM DIFFERENT TREATMENTS
# pool the data from different treatments together
regr_table_d1o1_exclude0.10 = rbind(worker_perf_d1o1_0.25, worker_perf_d1o1_0.40, worker_perf_d1o1_0.55)
# our covariates are CQ1, CQ2_3, CQ3
# converting some data type of some covariates
regr_table_d1o1_exclude0.10$CQ1 = as.factor(regr_table_d1o1_exclude0.10$CQ1)
regr_table_d1o1_exclude0.10$CQ2_3 = as.numeric(regr_table_d1o1_exclude0.10$CQ2_3)
regr_table_d1o1_exclude0.10$CQ3 = as.factor(regr_table_d1o1_exclude0.10$CQ3)
# TODO hide this
# DESIGN 1 ORDER 2
# read in qualtric output csv
qualtric_data_path_d1o2_0.40 = "../qualtric_data/20171118_qualtric_results_order2_0.40.csv"
current_task_data_d1o2_0.40 = get_current_task_data(qualtric_data_path_d1o2_0.40)
qualtric_data_path_d1o2_0.25 = "../qualtric_data/20171118_qualtric_results_order2_0.25.csv"
current_task_data_d1o2_0.25 = get_current_task_data(qualtric_data_path_d1o2_0.25)
qualtric_data_path_d1o2_0.55 = "../qualtric_data/20171119_qualtric_results_order2_0.55.csv"
current_task_data_d1o2_0.55 = get_current_task_data(qualtric_data_path_d1o2_0.55)
qualtric_data_path_d1o2_0.10 = "../qualtric_data/20171119_qualtric_results_order2_0.10.csv"
current_task_data_d1o2_0.10 = get_current_task_data(qualtric_data_path_d1o2_0.10)
# !!! REMOVE REPEATERS : turks who checked out the 0.10 task already
filter = !(current_task_data_d1o2_0.25$worker_id %in% current_task_data_d1o2_0.40$worker_id)
# get number of violaters
sum_spillover = sum(!filter)
# weed out the violaters
current_task_data_d1o2_0.25_weeded = current_task_data_d1o2_0.25[filter, ]
# !!! REMOVE REPEATERS : turks who checked out the 0.40 task already
filter = !(current_task_data_d1o2_0.10$worker_id %in% current_task_data_d1o2_0.55$worker_id)
# get number of violaters
sum_spillover = sum(!filter)
# weed out the violaters
current_task_data_d1o2_0.10_weeded = current_task_data_d1o2_0.10[filter, ]
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_d1o2_0.10 = evaluate_question_perf(current_task_data_d1o2_0.10_weeded, allQ)
question_perf_d1o2_0.55 = evaluate_question_perf(current_task_data_d1o2_0.55, allQ)
question_perf_d1o2_0.40 = evaluate_question_perf(current_task_data_d1o2_0.40, allQ)
question_perf_d1o2_0.25 = evaluate_question_perf(current_task_data_d1o2_0.25_weeded, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_d1o2_0.10 = evaluate_worker_perf(current_task_data_d1o2_0.10_weeded, allQ)
worker_perf_d1o2_0.55 = evaluate_worker_perf(current_task_data_d1o2_0.55, allQ)
worker_perf_d1o2_0.40 = evaluate_worker_perf(current_task_data_d1o2_0.40, allQ)
worker_perf_d1o2_0.25 = evaluate_worker_perf(current_task_data_d1o2_0.25_weeded, allQ)
# pool the data from different treatments together
worker_perf_d1o2_0.10$treatment = 0.10
worker_perf_d1o2_0.55$treatment = 0.55
worker_perf_d1o2_0.40$treatment = 0.40
worker_perf_d1o2_0.25$treatment = 0.25
regr_table_d1o2 = rbind(worker_perf_d1o2_0.10, worker_perf_d1o2_0.25, worker_perf_d1o2_0.40, worker_perf_d1o2_0.55)
# our covariates are CQ1, CQ2_3, CQ3
# converting some data type of some covariates
regr_table_d1o2$CQ1 = as.factor(regr_table_d1o2$CQ1)
regr_table_d1o2$CQ2_3 = as.numeric(regr_table_d1o2$CQ2_3)
regr_table_d1o2$CQ3 = as.factor(regr_table_d1o2$CQ3)
# POOLING THREE (0.25, 0.40, 0.55) CSV FILES FROM DIFFERENT TREATMENTS
# pool the data from different treatments together
regr_table_d1o2_exclude0.10 = rbind(worker_perf_d1o2_0.25, worker_perf_d1o2_0.40, worker_perf_d1o2_0.55)
# our covariates are CQ1, CQ2_3, CQ3
# converting some data type of some covariates
regr_table_d1o2_exclude0.10$CQ1 = as.factor(regr_table_d1o2_exclude0.10$CQ1)
regr_table_d1o2_exclude0.10$CQ2_3 = as.numeric(regr_table_d1o2_exclude0.10$CQ2_3)
regr_table_d1o2_exclude0.10$CQ3 = as.factor(regr_table_d1o2_exclude0.10$CQ3)
# combine regression tables for the two orders
regr_table_d1o1$order1 = 1
regr_table_d1o1_exclude0.10 = 1
regr_table_d1o2$order1 = 0
regr_table_d1o2_exclude0.10 = 0
regr_table_d1 = rbind(regr_table_d1o1,regr_table_d1o2)
regr_table_d1_exclude0.10 = rbind(regr_table_d1o1_exclude0.10, regr_table_d1o2_exclude0.10)
# TODO Hide this
# DESIGN 1 ORDER 1
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o1_0.10, allQ)
#stats summary of accuracies over all workers
smry_010_d1o1 = summarize_worker_perf(current_task_data_d1o1_0.10, allQ)
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o1_0.55_weeded, allQ)
#stats summary of accuracies over all workers
smry_055_d1o1 = summarize_worker_perf(current_task_data_d1o1_0.55_weeded, allQ)
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o1_0.40, allQ)
#stats summary of accuracies over all workers
smry_040_d1o1 = summarize_worker_perf(current_task_data_d1o1_0.40, allQ)
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o1_0.25_weeded, allQ)
#stats summary of accuracies over all workers
smry_025_d1o1 = summarize_worker_perf(current_task_data_d1o1_0.25_weeded, allQ)
avg_time_025_d1o1 = mean(as.numeric(regr_table_d1o1[regr_table_d1o1$treatment == 0.25,]$time_spent))/60
avg_time_010_d1o1 = mean(as.numeric(regr_table_d1o1[regr_table_d1o1$treatment == 0.10,]$time_spent))/60
avg_time_040_d1o1 = mean(as.numeric(regr_table_d1o1[regr_table_d1o1$treatment == 0.40,]$time_spent))/60
avg_time_055_d1o1 = mean(as.numeric(regr_table_d1o1[regr_table_d1o1$treatment == 0.55,]$time_spent))/60
# DESIGN 1 ORDER 2
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o2_0.10_weeded, allQ)
#stats summary of accuracies over all workers
smry_010_d1o2 = summarize_worker_perf(current_task_data_d1o2_0.10_weeded, allQ)
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o2_0.55, allQ)
#stats summary of accuracies over all workers
smry_055_d1o2 = summarize_worker_perf(current_task_data_d1o2_0.55, allQ)
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o2_0.40, allQ)
#stats summary of accuracies over all workers
smry_040_d1o2 = summarize_worker_perf(current_task_data_d1o2_0.40, allQ)
#stats summary of accuracies over all questions
# summarize_question_accuracy(current_task_data_d1o2_0.25_weeded, allQ)
#stats summary of accuracies over all workers
smry_025_d1o2=summarize_worker_perf(current_task_data_d1o2_0.25_weeded, allQ)
avg_time_025_d1o2 = mean(as.numeric(regr_table_d1o2[regr_table_d1o2$treatment == 0.25,]$time_spent))/60
avg_time_010_d1o2 = mean(as.numeric(regr_table_d1o2[regr_table_d1o2$treatment == 0.10,]$time_spent))/60
avg_time_040_d1o2 = mean(as.numeric(regr_table_d1o2[regr_table_d1o2$treatment == 0.40,]$time_spent))/60
avg_time_055_d1o2 = mean(as.numeric(regr_table_d1o2[regr_table_d1o2$treatment == 0.55,]$time_spent))/60
d1_summary = data.frame(
Name=c("Design 1", "Design 1", "Design 1", "Design 1","Design 1", "Design 1", "Design 1", "Design 1"),
Order=c(1,1,1,1,2,2,2,2),
Treatmet=c(0.1,0.25, 0.40, 0.55,0.1,0.25, 0.40, 0.55),
N=c(nrow(worker_perf_d1o1_0.10),nrow(worker_perf_d1o1_0.25),nrow(worker_perf_d1o1_0.40),nrow(worker_perf_d1o1_0.55),nrow(worker_perf_d1o2_0.10),nrow(worker_perf_d1o2_0.25),nrow(worker_perf_d1o2_0.40),nrow(worker_perf_d1o2_0.55)),
TotalTimeTaken=c("11h 15min","3h 15min", "0h 40min", "0h 40min","15h 20min","2h 40min", "2h 20min", "3h 10min"),
AvgTimePerTaskMin = c(avg_time_010_d1o1,avg_time_025_d1o1,avg_time_040_d1o1,avg_time_055_d1o1,avg_time_010_d1o2,avg_time_025_d1o2,avg_time_040_d1o2,avg_time_055_d1o2),
AccuracyMean=c(smry_010_d1o1$mean,smry_025_d1o1$mean,smry_040_d1o1$mean,smry_055_d1o1$mean,smry_010_d1o2$mean,smry_025_d1o2$mean,smry_040_d1o2$mean,smry_055_d1o2$mean),
AccuracySE=c(smry_010_d1o1$se,smry_025_d1o1$se,smry_040_d1o1$se,smry_055_d1o1$se,smry_010_d1o2$se,smry_025_d1o2$se,smry_040_d1o2$se,smry_055_d1o2$se))
knitr::kable(d1_summary, "markdown")
summary(regr_table_pilot)
# read in qualtric output csv
qualtric_pilot_data_path_0.25 = "../qualtric_data/20171028_qualtric_results_pilot_0.25.csv"
current_task_pilot_data_0.25 = get_current_task_data(qualtric_pilot_data_path_0.25)
qualtric_pilot_data_path_0.10 = "../qualtric_data/20171028_qualtric_results_pilot_0.10.csv"
current_task_pilot_data_0.10 = get_current_task_data(qualtric_pilot_data_path_0.10)
#evaluate accuracy per worker, return a table per worker
worker_perf_pilot_0.25 = evaluate_worker_perf(current_task_pilot_data_0.25, allQ)
worker_perf_pilot_0.10 = evaluate_worker_perf(current_task_pilot_data_0.10, allQ)
# pool the data from different treatments together
worker_perf_pilot_0.25$treatment = 0.25
worker_perf_pilot_0.10$treatment = 0.10
regr_table_pilot = rbind(worker_perf_pilot_0.10, worker_perf_pilot_0.25)
# our covariates are CQ1, CQ2_3, CQ3
# converting some data type of some covariates
regr_table_pilot$CQ1 = as.factor(regr_table_pilot$CQ1)
regr_table_pilot$CQ2_3 = as.numeric(regr_table_pilot$CQ2_3)
regr_table_pilot$CQ3 = as.factor(regr_table_pilot$CQ3)
summary(regr_table_pilot)
