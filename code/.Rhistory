"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
# append to existing data
existing_dt = rbind(existing_dt, dt_status)
write.csv(existing_dt, file = existing_path)
dt_status
}
construct_frame_worderIDs_task_status = function(current_task_data, allQ, payment_accuracy_threshold, task_name) {
existing_dt = fread(existing_path)
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, task_name = task_name]
dt_status
}
construct_frame_worderIDs_task_status(current_task_data, allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
construct_frame_worderIDs_task_status = function(current_task_data, allQ, payment_accuracy_threshold, task_name) {
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, task_name = task_name]
dt_status
}
construct_frame_worderIDs_task_status(current_task_data, allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
construct_frame_worderIDs_task_status = function(current_task_data, allQ, payment_accuracy_threshold, task_name) {
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, task_name = task_name]
dt_status
}
construct_frame_worderIDs_task_status(current_task_data = current_task_data, allQ = allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
construct_frame_worderIDs_task_status = function(current_task_data, allQ, payment_accuracy_threshold, task_name) {
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, task_name := task_name]
dt_status
}
construct_frame_worderIDs_task_status(current_task_data = current_task_data, allQ = allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
dum = construct_frame_worderIDs_task_status(current_task_data = current_task_data, allQ = allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
dum
construct_frame_worderIDs_task_status = function(current_task_data, allQ, payment_accuracy_threshold, task_name) {
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, task_name := task_name]
dt_status[, task_date := current_task_data[1]$StartDate]
dt_status
}
dum = construct_frame_worderIDs_task_status(current_task_data = current_task_data, allQ = allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
dum
dum
construct_frame_worderIDs_task_status = function(current_task_data, allQ, payment_accuracy_threshold, task_name) {
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
dt_completer_status[, pay_or_not := as.numeric(accuracy >= payment_threshold & screener == 1 & complete_task == 1)]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold][,pay_or_not :=0]
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, task_name := task_name]
dt_status[, task_date := substr(current_task_data[1]$StartDate, 1, 10)]
dt_status
}
dum = construct_frame_worderIDs_task_status(current_task_data = current_task_data, allQ = allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
dum
dum
get_current_task_data = function(csv_path) {
current_task_data = fread(csv_path)[-c(1,2),] # strip off first two rows of non-reposnse information
current_task_data = current_task_data[StartDate != "",] # stip off any empty rows at the end
}
sum(dum$pay_or_not)
dum = construct_frame_worderIDs_task_status(current_task_data = current_task_data, allQ = allQ, payment_accuracy_threshold = 0.30, task_name = "pilot 0.25")
sum(dum$pay_or_not)
Source(data_transformation_functions.r)
source(data_transformation_functions.r)
construct_frame_worderIDs_task_status(current_task_data = current_task_data], allQ = allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
construct_frame_worderIDs_task_status(current_task_data = current_task_data, allQ = allQ, payment_accuracy_threshold = 0.25, task_name = "pilot 0.25")
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
allQ = allQ, payment_accuracy_threshold = 0.25,
task_name = "pilot 0.25")
worderIDs_task_status
worderIDs_task_status
worderIDs_task_status[pay_or_not == 1, "worker_id"]
qualtric_data_path = "../qualtric_data/20171028_qualtric_results_pilot_0.10.csv"
# load supporting functions
source(file = "data_transformation_functions.r")
# construct_frame_worderIDs_task_status(current_task_data, allQ, payment_accuracy_threshold, task_name)
# adjust the payment threshold if 0.25 task accuracy is too low
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
allQ = allQ, payment_accuracy_threshold = 0.25,
task_name = "pilot 0.25")
# Who to pay
worderIDs_task_status[pay_or_not == 1, "worker_id"]
worderIDs_task_status
# this is the qualtric csv file you download from qualtric platform, containing survey results
qualtric_data_path = "../qualtric_data/20171028_qualtric_results_pilot_0.25.csv"
# load supporting functions
source(file = "data_transformation_functions.r")
# construct_frame_worderIDs_task_status(current_task_data, allQ, payment_accuracy_threshold, task_name)
# adjust the payment threshold if 0.25 task accuracy is too low
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
allQ = allQ, payment_accuracy_threshold = 0.25,
task_name = "pilot 0.25")
# Who to pay
worderIDs_task_status[pay_or_not == 1, "worker_id"]
get_MTurk_worker_id = function(csv_path) {
current_MTurk_data = fread(csv_path)
worker_id = current_MTurk_data$WorkerId
worker_id
}
get_MTurk_worker_id(csv_path = MTurk_data_path)
MTurk_data_path = "../MTurk_data/20171028_mturk_results_pilot_0.25.csv"
get_MTurk_worker_id(csv_path = MTurk_data_path)
qualtric_data_path = "../qualtric_data/20171028_qualtric_results_pilot_0.25.csv"
MTurk_data_path = "../MTurk_data/20171028_mturk_results_pilot_0.25.csv"
# load supporting functions
source(file = "data_transformation_functions.r")
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
get_MTurk_worker_id(csv_path = MTurk_data_path)
fread("../MTurk_data/20171028_mturk_results_pilot_0.25.csv")
dum = fread("../MTurk_data/20171028_mturk_results_pilot_0.25.csv")
names(dum)
dum = fread("../MTurk_data/20171028_mturk_results_pilot_0.25.csv", header = TRUE)
head(dum)
dum = fread("../MTurk_data/20171028_mturk_results_pilot_0.25.csv")
read.csv("../MTurk_data/20171028_mturk_results_pilot_0.25.csv")
read.csv("../MTurk_data/20171028_mturk_results_pilot_0.25.csv")$WorkerID
read.csv("../MTurk_data/20171028_mturk_results_pilot_0.25.csv")$WorkerId
get_MTurk_worker_id = function(csv_path) {
read.csv(csv_path)$WorkerId
}
get_MTurk_worker_id(csv_path = MTurk_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
construct_frame_worderIDs_task_status = function(current_task_data, submitted_MTurk_ids, allQ, payment_accuracy_threshold, task_name) {
# for those who completed the task
dt_completer_status = evaluate_worker_perf(current_task_data, allQ)[,c("worker_id",
"accuracy",
"screener")]
dt_completer_status[, complete_task := 1][, payment_threshold:=payment_threshold]
# for those who did not complete the task
not_completer_id = current_task_data[Finished == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = not_completer_id)
dt_not_completer_status[, accuracy := NA][, screener := NA][, complete_task := 0][,payment_threshold:=payment_threshold]
# for everyone with identifiable worker id
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, worker_id_found_on_MTurk := as.numeric(worker_id %in% submitted_MTurk_ids)]
dt_status[, task_name := task_name]
dt_status[, task_date := substr(current_task_data[1]$StartDate, 1, 10)]
dt_status[, pay_or_not := as.numeric(accuracy >= payment_threshold &
screener == 1 &
complete_task == 1 &
worker_id_found_on_MTurk == 1 )]
dt_status
}
qualtric_data_path = "../qualtric_data/20171028_qualtric_results_pilot_0.25.csv"
MTurk_data_path = "../MTurk_data/20171028_mturk_results_pilot_0.25.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
source(file = "data_transformation_functions.r")
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
allQ = allQ, payment_accuracy_threshold = 0.25,
task_name = "pilot 0.25")
source(file = "data_transformation_functions.r")
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
allQ = allQ, payment_accuracy_threshold = 0.25,
task_name = "pilot 0.25")
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "pilot 0.25")
rm(list = ls())
# this is the qualtric csv file you download from qualtric platform, containing survey results
qualtric_data_path = "../qualtric_data/20171028_qualtric_results_pilot_0.25.csv"
MTurk_data_path = "../MTurk_data/20171028_mturk_results_pilot_0.25.csv"
# load supporting functions
source(file = "data_transformation_functions.r")
# adjust the payment threshold if 0.25 task accuracy is too low
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "pilot 0.25")
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "pilot 0.25")
worderIDs_task_status
worderIDs_task_status
worderIDs_task_status[pay_or_not == 1, "worker_id"]
worderIDs_task_status[pay_or_not == 1, "worker_id"]
names(workerIDs_ask_status)
worderIDs_task_status
names(worderIDs_task_status)
worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk")]
DONT_USE_construct_frame_workerIDs_task_empty = function(custom_path) {
tmp_frame = data.table()
write.csv(x = tmp_frame, file = custom_path)
}
tatus/worker_status.csv"
DONT_USE_construct_frame_workerIDs_task_empty(existing_path)
DONT_USE_construct_frame_workerIDs_task_empty = function(custom_path) {
tmp_frame = data.table()
write.csv(x = tmp_frame, file = custom_path)
}
existing_path = "../MTurk_ID_status/worker_status.csv"
DONT_USE_construct_frame_workerIDs_task_empty(existing_path)
existing_path = "../MTurk_ID_status/worker_status.csv"
DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path)
source(file = "data_transformation_functions.r")
existing_status = fread(existing_path)
existing_status
rbind(existing_status, worderIDs_task_status)
names(MTurk_worker_id)
names(current_task_data)
names(worderIDs_task_status)
DONT_USE_construct_frame_workerIDs_task_empty = function(custom_path) {
tmp_frame = data.table("worker_id" = NA,
"accuracy" = NA,
"screener" = NA,
"complete_task" = NA,
"payment_accuracy_threshold" = NA,
"worker_id_found_on_MTurk" = NA,
"task_name" = NA,
"task_date" = NA,
"pay_or_not" = NA
)
write.csv(x = tmp_frame, file = custom_path)
}
DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path)
rbind(existing_status, worderIDs_task_status)
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)
rbind(existing_status, worderIDs_task_status)
existing_status
existing_status
worderIDs_task_status
existing_path = "../MTurk_ID_status/worker_status.csv"
DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path)
?data.table
?data.table
s
rbind(existing_status, worderIDs_task_status)
DONT_USE_construct_frame_workerIDs_task_empty = function(custom_path) {
tmp_frame = data.table("worker_id" = NA,
"accuracy" = NA,
"screener" = NA,
"complete_task" = NA,
"payment_accuracy_threshold" = NA,
"worker_id_found_on_MTurk" = NA,
"task_name" = NA,
"task_date" = NA,
"pay_or_not" = NA
)
tmp_frame = tmp_frame[,"V1":=NULL]
write.csv(x = tmp_frame, file = custom_path)
}
existing_path = "../MTurk_ID_status/worker_status.csv"
DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path)
existing_status = fread(existing_path)
existing_status
?fread
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path,header = FALSE)
existing_status
DONT_USE_construct_frame_workerIDs_task_empty = function(custom_path) {
tmp_frame = data.table("worker_id" = NA,
"accuracy" = NA,
"screener" = NA,
"complete_task" = NA,
"payment_accuracy_threshold" = NA,
"worker_id_found_on_MTurk" = NA,
"task_name" = NA,
"task_date" = NA,
"pay_or_not" = NA
)
tmp_frame = tmp_frame[,2:9]
write.csv(x = tmp_frame, file = custom_path)
}
existing_path = "../MTurk_ID_status/worker_status.csv"
DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path)
DONT_USE_construct_frame_workerIDs_task_empty = function(custom_path) {
tmp_frame = data.frame("worker_id" = NA,
"accuracy" = NA,
"screener" = NA,
"complete_task" = NA,
"payment_accuracy_threshold" = NA,
"worker_id_found_on_MTurk" = NA,
"task_name" = NA,
"task_date" = NA,
"pay_or_not" = NA
)
write.csv(x = tmp_frame, file = custom_path)
}
existing_path = "../MTurk_ID_status/worker_status.csv"
DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path)
DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path)
DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path)
existing_status = fread(existing_path)
existing_status
rbind(existing_status, worderIDs_task_status)
rm(list = ls())
# load supporting functions
source(file = "data_transformation_functions.r")
# this is the qualtric csv file you download from qualtric platform, containing survey results
qualtric_data_path = "../qualtric_data/20171028_qualtric_results_pilot_0.25.csv"
MTurk_data_path = "../MTurk_data/20171028_mturk_results_pilot_0.25.csv"
# construct contents for file update
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "pilot 0.25")
existing_path = "../MTurk_ID_status/worker_status.csv"
write.csv(x = worderIDs_task_status, file = existing_path, append = TRUE)
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)
all_status = rbind(existing_status, worderIDs_task_status)
write.csv(x = worderIDs_task_status, file = existing_path)
existing_status
DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path) #THEN DELETE INDEX COLUMN IN EXCEL PLEASE
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)
all_status = rbind(existing_status, worderIDs_task_status)
write.csv(x = worderIDs_task_status, file = existing_path)
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)
all_status = rbind(existing_status, worderIDs_task_status)
write.csv(x = worderIDs_task_status, file = existing_path)
worderIDs_task_status
data.table(worderIDs_task_status)
existing_status
ncol(existing_status)
existing_status = fread(existing_path)[,-c("V1")]
ncol(existing_path)
ncol(existing_status)
existing_status
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status)
write.csv(x = worderIDs_task_status, file = existing_path)
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status)
write.csv(x = worderIDs_task_status, file = existing_path)
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status)
write.csv(x = worderIDs_task_status, file = existing_path)
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)[,-c("V1")]
existing_status
worderIDs_task_status
rbind(existing_status, worderIDs_task_status)
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status)
write.csv(x = all_status, file = existing_path)
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status)
write.csv(x = all_status, file = existing_path)
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status)
write.csv(x = all_status, file = existing_path)
DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path)
rm(list = ls())
qualtric_data_path = "../qualtric_data/20171028_qualtric_results_pilot_0.10.csv"
MTurk_data_path = "../MTurk_data/20171028_mturk_results_pilot_0.10.csv"
# construct contents for file update
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "pilot 0.10")
source(file = "data_transformation_functions.r")
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "pilot 0.10")
worderIDs_task_status
worderIDs_task_status
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status)
write.csv(x = all_status, file = existing_path)
rm(list = ls())
# this is the qualtric csv file you download from qualtric platform, containing survey results
qualtric_data_path = "../qualtric_data/20171028_qualtric_results_pilot_0.25.csv"
MTurk_data_path = "../MTurk_data/20171028_mturk_results_pilot_0.25.csv"
# load supporting functions
source(file = "data_transformation_functions.r")
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "pilot",
treatment_payrate = 0.25)
# Who to pay
worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk")]
worderIDs_task_status
rm(list = ls())
rm(list = ls())
DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path)
source(file = "data_transformation_functions.r")
DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path)
existing_path = "../MTurk_ID_status/worker_status.csv"
DONT_USE_construct_frame_workerIDs_task_empty(custom_path = existing_path)
qualtric_data_path = "../qualtric_data/20171028_qualtric_results_pilot_0.10.csv"
MTurk_data_path = "../MTurk_data/20171028_mturk_results_pilot_0.10.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "pilot", #!!!UPDATE
treatment_payrate = 0.10) #!!! UPADTE
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status)
write.csv(x = all_status, file = existing_path)
qualtric_data_path = "../qualtric_data/20171028_qualtric_results_pilot_0.25.csv" #!!!UPDATE
MTurk_data_path = "../MTurk_data/20171028_mturk_results_pilot_0.25.csv" #!!!UPDATE
# construct contents for file update
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "pilot", #!!!UPDATE
treatment_payrate = 0.25) #!!! UPADTE
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status)
write.csv(x = all_status, file = existing_path)
worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk")]
