available = current_task_data[worker_id != "", ]$worker_id
available
}
# get list of worker ids from turks who completed the task
get_worderIDs_completed_task = function(current_task_data) {
available = current_task_data[Finished == "TRUE", ]$worker_id
available
}
# get list of worker ids from turks who did not completed the task
get_worderIDs_not_completed_task = function(current_task_data) {
available = current_task_data[Finished == "FALSE", ]$worker_id
available
}
#------------------------------------------------
# OLD CODE
rm(list = ls())
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
# load supporting functions
source(file = "order1_data_transformation_functions.r")
qualtric_data_path = "../qualtric_data/Test_Puppies_20171111_order1_0.10_0.55_November 11, 2017_20.27.csv"
data = get_current_task_data(qualtric_data_path)
data$Q167
duplicated(data$Q167)
sum(duplicated(data$Q167))
duplicated(data$Q167)
"A" in ("A", "B", "C")
"A" in c("A", "B", "C")
data_0.55['Q167' %in% data_0.10$Q167]
data_0.55 = get_current_task_data(qualtric_data_path)
data_0.10 = get_current_task_data(qualtric_data_path)
data_0.55 = get_current_task_data(qualtric_data_path)
data_0.55['Q167' %in% data_0.10$Q167]
data_0.55$Q167 %in% data_0.10$Q167
data_0.10 = get_current_task_data(qualtric_data_path_0.10)
data_0.55 = get_current_task_data(qualtric_data_path_0.55)
data_0.55$Q167 %in% data_0.10$Q167
data_0.10 = get_current_task_data(qualtric_data_path_0.10)
data_0.55 = get_current_task_data(qualtric_data_path_0.55)
qualtric_data_path_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
qualtric_data_path_0.55 = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv"
data_0.10 = get_current_task_data(qualtric_data_path_0.10)
data_0.55 = get_current_task_data(qualtric_data_path_0.55)
data_0.55$Q167 %in% data_0.10$Q167
data_0.55$Q167 %in% data_0.10$Q167
data_0.55$Q167
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "order1_data_transformation_functions.r")
qualtric_data_path_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
qualtric_data_path_0.55 = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv"
data_0.10 = get_current_task_data(qualtric_data_path_0.10)
data_0.55 = get_current_task_data(qualtric_data_path_0.55)
data_0.10
data_0.55$Q167
data_0.55$worker_id %in% data_0.10$worker_id
sum(data_0.55$worker_id %in% data_0.10$worker_id)
rm(list = ls())
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "order1_data_transformation_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
qualtric_data_path = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv" #!!!UPDATE
MTurk_data_path = "../MTurk_data/20171111_mturk_results_order1_0.10.csv" #!!!UPDATE
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
MTurk_worker_id
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "pilot", #!!!UPDATE
treatment_payrate = 0.10) #!!! UPADTE
worderIDs_task_status
worderIDs_task_status
View(worderIDs_task_status)
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!!UPDATE
treatment_payrate = 0.10) #!!! UPADTE
View(worderIDs_task_status)
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status)
write.csv(x = all_status, file = existing_path)
rm(list = ls())
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "order1_data_transformation_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
qualtric_data_path = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv" #!!!UPDATE
MTurk_data_path = "../MTurk_data/20171111_mturk_results_order1_0.55.csv" #!!!UPDATE
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!!UPDATE
treatment_payrate = 0.55) #!!! UPADTE
View(worderIDs_task_status)
View(worderIDs_task_status)
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status)
write.csv(x = all_status, file = existing_path)
# FOCUS ON A SINGLE CSV FILE CORRESPONDING TO A SINGLE TREATMENT
# ORDER 1, PAYMENT RATE = 0.10
# read in qualtric output csv
qualtric_data_path_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
current_task_data_0.10 = get_current_task_data(qualtric_data_path_0.10)
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_0.10 = evaluate_question_perf(current_task_data_0.10, allQ)
question_perf_0.10
#stats summary of accuracies over all questions
summarize_question_accuracy(current_task_data_0.10, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_0.10 = evaluate_worker_perf(current_task_data_0.10, allQ)
worker_perf_0.10
#stats summary of accuracies over all workers
summarize_worker_perf(current_task_data_0.10, allQ)
rm(list = ls())
# load supporting functions
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "order1_data_transformation_functions.r")
#---------------------------------------------------------------------#
# FOCUS ON A SINGLE CSV FILE CORRESPONDING TO A SINGLE TREATMENT
# ORDER 1, PAYMENT RATE = 0.10
# read in qualtric output csv
qualtric_data_path_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
current_task_data_0.10 = get_current_task_data(qualtric_data_path_0.10)
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_0.10 = evaluate_question_perf(current_task_data_0.10, allQ)
question_perf_0.10
#stats summary of accuracies over all questions
summarize_question_accuracy(current_task_data_0.10, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_0.10 = evaluate_worker_perf(current_task_data_0.10, allQ)
worker_perf_0.10
#stats summary of accuracies over all workers
summarize_worker_perf(current_task_data_0.10, allQ)
# Use this code to evaluate worker performance based on pilot resul csvs
rm(list = ls())
# load supporting functions
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "order1_data_transformation_functions.r")
#---------------------------------------------------------------------#
# FOCUS ON A SINGLE CSV FILE CORRESPONDING TO A SINGLE TREATMENT
# ORDER 1, PAYMENT RATE = 0.10
# read in qualtric output csv
qualtric_data_path_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
current_task_data_0.10 = get_current_task_data(qualtric_data_path_0.10)
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_0.10 = evaluate_question_perf(current_task_data_0.10, allQ)
question_perf_0.10
#stats summary of accuracies over all questions
summarize_question_accuracy(current_task_data_0.10, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_0.10 = evaluate_worker_perf(current_task_data_0.10, allQ)
worker_perf_0.10
#stats summary of accuracies over all workers
summarize_worker_perf(current_task_data_0.10, allQ)
#---------------------------------------------------------------------#
# FOCUS ON A SINGLE CSV FILE CORRESPONDING TO A SINGLE TREATMENT
# ORDER 1, PAYMENT RATE = 0.55
# read in qualtric output csv
qualtric_data_path_0.55 = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv"
current_task_data_0.55 = get_current_task_data(qualtric_data_path_0.55)
length(current_task_data_0.55$worker_id)
question_perf_0.55 = evaluate_question_perf(current_task_data_0.55, allQ)
question_perf_0.55
#stats summary of accuracies over all questions
summarize_question_accuracy(current_task_data_0.55, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_0.55 = evaluate_worker_perf(current_task_data_0.55, allQ)
worker_perf_0.55
length(worker_perf_0.55)
nrow(worker_perf_0.55)
nrow(current_task_data_0.55)
current_task_data_0.55$worker_id %in% current_task_data_0.10$worker_id
!(current_task_data_0.55$worker_id %in% current_task_data_0.10$worker_id)
sum(!(current_task_data_0.55$worker_id %in% current_task_data_0.10$worker_id))
!(current_task_data_0.55$worker_id %in% current_task_data_0.10$worker_id)
sum(!(current_task_data_0.55$worker_id %in% current_task_data_0.10$worker_id))
filter = !(current_task_data_0.55$worker_id %in% current_task_data_0.10$worker_id)
# get number of violaters
sum_spillover = sum(!filter)
# weed out the violaters
current_task_data_0.55_weeded = current_task_data_0.55[filter, ]
current_task_data_0.55_weeded
nrow(current_task_data_0.55_weeded)
question_perf_0.55 = evaluate_question_perf(current_task_data_0.55_weeded, allQ)
question_perf_0.55
#stats summary of accuracies over all questions
summarize_question_accuracy(current_task_data_0.55_weeded, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_0.55 = evaluate_worker_perf(current_task_data_0.55_weeded, allQ)
worker_perf_0.55
#stats summary of accuracies over all workers
summarize_worker_perf(current_task_data_0.55_weeded, allQ)
nrow(worker_perf_0.55)
C(1,2,4) %in% c(2,4,5,6,7,1)
factor(1,2,4) %in% factor(2,4,5,6,7,1)
c("A" , "B", "C") %in% c("C", "A", "A", "D")
rm(list = ls())
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
# load supporting functions
source(file = "order1_data_transformation_functions.r")
# EARLIER EXPERIMENT
qualtric_data_path_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
# LATER EXPERIMENT
qualtric_data_path_0.55 = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv"
data_0.10 = get_current_task_data(qualtric_data_path_0.10)
data_0.55 = get_current_task_data(qualtric_data_path_0.55)
# REPEATERS
filter = data_0.55$worker_id %in% data_0.10$worker_id
# NUMBER OF REPEATERS
sum(filter)
# WHO THEY ARE
data_0.55[filter,]$worker_id
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)[,-c("V1")]
repeater_IDs = data_0.55[filter,]$worker_id
existing_status[repeater_IDs,]
repeater_IDs
existing_status[worker_id == repeater_IDs,]
existing_status[worker_id %in% repeater_IDs,]
repeater_status = existing_status[worker_id %in% repeater_IDs,]
View(repeater_status)
repeater_status = existing_status[worker_id %in% repeater_IDs,][order(worker_id),]
repeater_status = existing_status[worker_id %in% repeater_IDs,] %>% [order(worker_id),]
View(repeater_status)
rm(list = ls())
# load supporting functions
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "order1_data_transformation_functions.r")
#---------------------------------------------------------------------#
# FOCUS ON A SINGLE CSV FILE CORRESPONDING TO A SINGLE TREATMENT
# ORDER 1, PAYMENT RATE = 0.10
# read in qualtric output csv
qualtric_data_path_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
current_task_data_0.10 = get_current_task_data(qualtric_data_path_0.10)
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_0.10 = evaluate_question_perf(current_task_data_0.10, allQ)
question_perf_0.10
#stats summary of accuracies over all questions
summarize_question_accuracy(current_task_data_0.10, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_0.10 = evaluate_worker_perf(current_task_data_0.10, allQ)
worker_perf_0.10
#stats summary of accuracies over all workers
summarize_worker_perf(current_task_data_0.10, allQ)
#number of observations valid for regression
nrow(worker_perf_0.10)
#---------------------------------------------------------------------#
# FOCUS ON A SINGLE CSV FILE CORRESPONDING TO A SINGLE TREATMENT
# ORDER 1, PAYMENT RATE = 0.55
# read in qualtric output csv
qualtric_data_path_0.55 = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv"
current_task_data_0.55 = get_current_task_data(qualtric_data_path_0.55)
# !!! REMOVE SPILLOVERS : turks who checked out the 0.10 task already
filter = !(current_task_data_0.55$worker_id %in% current_task_data_0.10$worker_id)
# get number of violaters
sum_spillover = sum(!filter)
# weed out the violaters
current_task_data_0.55_weeded = current_task_data_0.55[filter, ]
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_0.55 = evaluate_question_perf(current_task_data_0.55_weeded, allQ)
question_perf_0.55
#stats summary of accuracies over all questions
summarize_question_accuracy(current_task_data_0.55_weeded, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_0.55 = evaluate_worker_perf(current_task_data_0.55_weeded, allQ)
worker_perf_0.55
#stats summary of accuracies over all workers
summarize_worker_perf(current_task_data_0.55_weeded, allQ)
#number of observations valid for regression
nrow(worker_perf_0.55)
nrow(worker_perf_0.10)
repeater_status
rm(list = ls())
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
# load supporting functions
source(file = "order1_data_transformation_functions.r")
# EARLIER EXPERIMENT
qualtric_data_path_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
# LATER EXPERIMENT
qualtric_data_path_0.55 = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv"
data_0.10 = get_current_task_data(qualtric_data_path_0.10)
data_0.55 = get_current_task_data(qualtric_data_path_0.55)
# REPEATERS
filter = data_0.55$worker_id %in% data_0.10$worker_id
# NUMBER OF REPEATERS
sum(filter)
# WHO THEY ARE
repeater_IDs = data_0.55[filter,]$worker_id
#----------------------------------------------------------------------------#
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)[,-c("V1")]
repeater_status = existing_status[worker_id %in% repeater_IDs,][order(worker_id),]
repeater_status
repeater_status
repeater_status
rm(list = ls())
# load supporting functions
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "order1_data_transformation_functions.r")
#---------------------------------------------------------------------#
# FOCUS ON A SINGLE CSV FILE CORRESPONDING TO A SINGLE TREATMENT
# ORDER 1, PAYMENT RATE = 0.10
# read in qualtric output csv
qualtric_data_path_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
current_task_data_0.10 = get_current_task_data(qualtric_data_path_0.10)
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_0.10 = evaluate_question_perf(current_task_data_0.10, allQ)
question_perf_0.10
#stats summary of accuracies over all questions
summarize_question_accuracy(current_task_data_0.10, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_0.10 = evaluate_worker_perf(current_task_data_0.10, allQ)
worker_perf_0.10
#stats summary of accuracies over all workers
summarize_worker_perf(current_task_data_0.10, allQ)
#number of observations valid for regression
nrow(worker_perf_0.10)
#---------------------------------------------------------------------#
# FOCUS ON A SINGLE CSV FILE CORRESPONDING TO A SINGLE TREATMENT
# ORDER 1, PAYMENT RATE = 0.55
# read in qualtric output csv
qualtric_data_path_0.55 = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv"
current_task_data_0.55 = get_current_task_data(qualtric_data_path_0.55)
# !!! REMOVE SPILLOVERS : turks who checked out the 0.10 task already
filter = !(current_task_data_0.55$worker_id %in% current_task_data_0.10$worker_id)
# get number of violaters
sum_spillover = sum(!filter)
# weed out the violaters
current_task_data_0.55_weeded = current_task_data_0.55[filter, ]
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_0.55 = evaluate_question_perf(current_task_data_0.55_weeded, allQ)
question_perf_0.55
#stats summary of accuracies over all questions
summarize_question_accuracy(current_task_data_0.55_weeded, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_0.55 = evaluate_worker_perf(current_task_data_0.55_weeded, allQ)
worker_perf_0.55
#stats summary of accuracies over all workers
summarize_worker_perf(current_task_data_0.55_weeded, allQ)
#number of observations valid for regression
nrow(worker_perf_0.55)
hist(regr_table[treatment == 0.55,]$accuracy)
rm(list = ls())
# load supporting functions
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "order1_data_transformation_functions.r")
#---------------------------------------------------------------------#
# FOCUS ON A SINGLE CSV FILE CORRESPONDING TO A SINGLE TREATMENT
# ORDER 1, PAYMENT RATE = 0.10
# read in qualtric output csv
qualtric_data_path_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
current_task_data_0.10 = get_current_task_data(qualtric_data_path_0.10)
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_0.10 = evaluate_question_perf(current_task_data_0.10, allQ)
question_perf_0.10
#stats summary of accuracies over all questions
summarize_question_accuracy(current_task_data_0.10, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_0.10 = evaluate_worker_perf(current_task_data_0.10, allQ)
worker_perf_0.10
#stats summary of accuracies over all workers
summarize_worker_perf(current_task_data_0.10, allQ)
#number of observations valid for regression
nrow(worker_perf_0.10)
#---------------------------------------------------------------------#
# FOCUS ON A SINGLE CSV FILE CORRESPONDING TO A SINGLE TREATMENT
# ORDER 1, PAYMENT RATE = 0.55
# read in qualtric output csv
qualtric_data_path_0.55 = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv"
current_task_data_0.55 = get_current_task_data(qualtric_data_path_0.55)
# !!! REMOVE SPILLOVERS : turks who checked out the 0.10 task already
filter = !(current_task_data_0.55$worker_id %in% current_task_data_0.10$worker_id)
# get number of violaters
sum_spillover = sum(!filter)
# weed out the violaters
current_task_data_0.55_weeded = current_task_data_0.55[filter, ]
# evaluate accuracy per question
# of a particular question, how many people got it right?
question_perf_0.55 = evaluate_question_perf(current_task_data_0.55_weeded, allQ)
question_perf_0.55
#stats summary of accuracies over all questions
summarize_question_accuracy(current_task_data_0.55_weeded, allQ)
#evaluate accuracy per worker, return a table per worker
worker_perf_0.55 = evaluate_worker_perf(current_task_data_0.55_weeded, allQ)
worker_perf_0.55
#stats summary of accuracies over all workers
summarize_worker_perf(current_task_data_0.55_weeded, allQ)
#number of observations valid for regression
nrow(worker_perf_0.55)
#---------------------------------------------------------------------#
# FOCUS ON A SINGLE CSV FILE CORRESPONDING TO A SINGLE TREATMENT
# ORDER 1, PAYMENT RATE = 0.40
# Please fill in (reuse above code block)
#---------------------------------------------------------------------#
# FOCUS ON A SINGLE CSV FILE CORRESPONDING TO A SINGLE TREATMENT
# ORDER 1, PAYMENT RATE = 0.25
# Please fill in (reuse above code block)
#---------------------------------------------------------------------#
# POOLING TWO CSV FILES FROM DIFFERENT TREATMENTS
# pool the data from different treatments together
worker_perf_0.10$treatment = 0.10
worker_perf_0.55$treatment = 0.55
#worker_perf_0.55$treatment = 0.40
#worker_perf_0.55$treatment = 0.25
regr_table = rbind(worker_perf_0.10, worker_perf_0.55) # TEMPORARY
# regr_table = rbind(worker_perf_0.10, worker_perf_0.25, worker_perf_0.40, worker_perf_0.55) # ONCE ALL FOUR POSTINGS ARE DONE
# our covariates are CQ1, CQ2_3, CQ3
# converting some data type of some covariates
regr_table$CQ1 = as.factor(regr_table$CQ1)
regr_table$CQ2_3 = as.numeric(regr_table$CQ2_3)
regr_table$CQ3 = as.factor(regr_table$CQ3)
#---------------------------------------------------------------------#
# CHECK COVARIATE BALANCE
# Dog friends question
CQ1_1 = regr_table$CQ1 == "a lot less than half"
CQ1_2 = regr_table$CQ1 == "around half"
CQ1_3 = regr_table$CQ1 == "a lot more than half"
cov_regr_CQ1_1= lm(CQ1_1 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ1_1, vcov(cov_regr_CQ1_1))
cov_regr_CQ1_2= lm(CQ1_2 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ1_2, vcov(cov_regr_CQ1_2))
cov_regr_CQ1_3= lm(CQ1_3 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ1_3, vcov(cov_regr_CQ1_3))
# Preference to work with images question
cov_regr_CQ2_3= lm(CQ2_3 ~ treatment, data = regr_table)
lmtest::coeftest(cov_regr_CQ2_3, vcov(cov_regr_CQ2_3))
# Lived with or planned to own a dog
CQ3_1 = regr_table$CQ3 == "Yes"
CQ3_2 = regr_table$CQ3 == "No"
CQ3_3 = regr_table$CQ3 == "Maybe"
cov_regr_CQ3_1= lm(CQ3_1 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ3_1, vcov(cov_regr_CQ3_1))
cov_regr_CQ3_2= lm(CQ3_2 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ3_2, vcov(cov_regr_CQ3_2))
cov_regr_CQ3_3= lm(CQ3_3 ~ regr_table$treatment)
lmtest::coeftest(cov_regr_CQ3_3, vcov(cov_regr_CQ3_3))
#---------------------------------------------------------------------#
# ESTIMATING ATE
# TWO-SAMPLE T-TEST
# test if variance of the two groups are unequal
car::leveneTest(worker_perf_0.10$accuracy,worker_perf_0.55$accuracy,center=median)
# 2 sample independent t-test
t.test(worker_perf_0.10$accuracy,
worker_perf_0.55$accuracy,
alternative = "two.sided", var.equal = TRUE)
# REGRESSION
regr1 = lm(accuracy ~ treatment, data = regr_table)
regr2 = lm(accuracy ~ treatment + CQ1 + CQ2_3 + CQ3, data = regr_table)
summary(regr1)
summary(regr2)
lmtest::coeftest(regr1, vcov(regr1))
lmtest::coeftest(regr2, vcov(regr2))
hist(regr_table[treatment == 0.55,]$accuracy)
hist(regr_table[treatment == 0.55,]$accuracy)
rm(list = ls())
# this is the qualtric csv file you download from qualtric platform, containing survey results
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
qualtric_data_path = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171111_mturk_results_order1_0.55.csv" #!!! UPDATE
# load supporting functions
source(file = "order1_data_transformation_functions.r")
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ,
payment_accuracy_threshold = 0.25,
task_name = "order1", #!!! UPDATE
treatment_payrate = 0.55) #!!! UPDATE
# Who to pay
worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk")]
rm(list = ls())
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
# load supporting functions
source(file = "order1_data_transformation_functions.r")
# EARLIER EXPERIMENT
qualtric_data_path_0.10 = "../qualtric_data/20171111_qualtric_results_order1_0.10.csv"
# LATER EXPERIMENT
qualtric_data_path_0.55 = "../qualtric_data/20171111_qualtric_results_order1_0.55.csv"
data_0.10 = get_current_task_data(qualtric_data_path_0.10)
data_0.55 = get_current_task_data(qualtric_data_path_0.55)
# REPEATERS
filter = data_0.55$worker_id %in% data_0.10$worker_id
# NUMBER OF REPEATERS
sum(filter)
# WHO THEY ARE
repeater_IDs = data_0.55[filter,]$worker_id
#----------------------------------------------------------------------------#
existing_path = "../MTurk_ID_status/worker_status.csv"
existing_status = fread(existing_path)[,-c("V1")]
repeater_status = existing_status[worker_id %in% repeater_IDs,][order(worker_id),]
repeater_status
View(repeater_status)
existing_status
View(existing_status)
c(1,2) * c(2,3)
existing_status$treatment_payrate * existing_status$pay_or_not
sum(existing_status$treatment_payrate * existing_status$pay_or_not)
sum(existing_status$treatment_payrate * existing_status$pay_or_not, na.rm = T)
