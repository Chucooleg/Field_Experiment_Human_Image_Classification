existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data("../qualtric_data/20171120_qualtric_results_design2_pilot.csv")
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
x = evaluate_worker_perf.design2(current_task_data = current_task_data, allQ.design2)
x
x
rm(list = ls())
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design2_data_transformation_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data("../qualtric_data/20171120_qualtric_results_design2_pilot.csv")
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
x = evaluate_worker_perf.design2(current_task_data = current_task_data, allQ.design2)
x
x
rm(list = ls())
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design2_data_transformation_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data("../qualtric_data/20171120_qualtric_results_design2_pilot.csv")
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
x = evaluate_worker_perf.design2(current_task_data = current_task_data, allQ.design2)
rm(list = ls())
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design2_data_transformation_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data("../qualtric_data/20171120_qualtric_results_design2_pilot.csv")
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
x = evaluate_worker_perf.design2(current_task_data = current_task_data, allQ.design2)
rm(list = ls())
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design2_data_transformation_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data("../qualtric_data/20171120_qualtric_results_design2_pilot.csv")
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
current_task_data$`Timer1_Page Submit`
as.numeric(current_task_data$`Timer1_Page Submit`)
rm(list = ls())
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design2_data_transformation_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data("../qualtric_data/20171120_qualtric_results_design2_pilot.csv")
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
x = evaluate_worker_perf.design2(current_task_data = current_task_data, allQ.design2)
x
summarize_worker_perf.design2(current_task_data = current_task_data, allQ.design2)
x = evaluate_question_perf.design2(current_task_data = current_task_data, allQ.design2)
x
summarize_question_accuracy.design2(current_task_data = current_task_data, allQ.design2)
source(file = "design2_data_transformation_functions.r")
rm(list = ls())
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design2_data_transformation_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data("../qualtric_data/20171120_qualtric_results_design2_pilot.csv")
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
dum = construct_frame_worderIDs_task_status.design2(current_task_data, submitted_MTurk_ids = MTurk_worker_id,
allQ.design2, payment_accuracy_threshold = 0.75,
task_name = "task name", treatment_payrate = 0.50, bonus_rate = 0.05,
existing_path = "../MTurk_ID_status/worker_status.csv")
View(dum)
dum = construct_frame_worderIDs_task_status.design2(current_task_data, submitted_MTurk_ids = MTurk_worker_id,
allQ.design2, payment_accuracy_threshold = 0.75,
task_name = "task name", treatment_payrate = 0.10, bonus_rate = 0.05,
existing_path = "../MTurk_ID_status/worker_status.csv")
dum
Vuew(dum)
View(dum)
sum(dum$pay_or_not)
sum(dum$total_pay)
sum(dum$total_pay, na.rm = )
sum(dum$total_pay, na.rm = T)
rm(list = ls())
# load supporting functions
# setwd("/home/fred/Field_Experiment_Human_Image_Classification/code")
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design1_data_transformation_functions.r")
source(file = "design1_data_analysis_functions.r")
#---------------------------------------------------------------------#
# read in qualtric output csv
qualtric_data_path = "../qualtric_data/20171123_qualtric_results_design2_pilot.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
# load supporting functions
source(file = "design2_data_transformation_functions.r")
#source(file = "design1_data_analysis_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status.design2(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ.design2,
payment_accuracy_threshold = 0.75,
task_name = "design2 pilot", #!!! UPDATE
treatment_payrate = 0.10, #!!! UPDATE
bonus_rate = 0.05,
existing_path = existing_path)
View(worderIDs_task_status)
# Who pass this HIT enough to be eligible for payment
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id","worker_id_found_on_MTurk",
"repeater", "total_pay")]
eligbile_id
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id", "total_pay")]
eligbile_id
construct_frame_worderIDs_task_status.design2 = function(current_task_data, submitted_MTurk_ids, allQ.design2,
payment_accuracy_threshold, task_name, treatment_payrate, existing_path, bonus_rate) {
# for those who completed the task
dt_completer_status = evaluate_worker_perf.design2(current_task_data, allQ.design2)[,c("worker_id",
"group",
"accuracy",
"accuracy_S1",
"accuracy_S2",
"accuracy_S3",
"screener")]
dt_completer_status[, complete_task := 1][, payment_accuracy_threshold:=payment_accuracy_threshold]
completer_repeater_ids = identify_repeaters_from_database(existing_path, dt_completer_status$worker_id)
dt_completer_status[, repeater := as.numeric(worker_id %in% completer_repeater_ids)]
# for those who did not complete the task
not_completer_id = current_task_data[toupper(Finished) == "FALSE", ]$worker_id
dt_not_completer_status = data.table(worker_id = toupper(not_completer_id))
dt_not_completer_status[, accuracy := NA][, accuracy_S1 := NA][, accuracy_S2 := NA][, accuracy_S3 := NA]
dt_not_completer_status[, group := NA][, screener := NA][, complete_task := 0][,payment_accuracy_threshold:=payment_accuracy_threshold]
not_completer_repeater_ids = identify_repeaters_from_database(existing_path, dt_not_completer_status$worker_ids)
dt_not_completer_status[, repeater := as.numeric(toupper(worker_id) %in% not_completer_repeater_ids)]
# for everyone with identifiable worker id
dt_status = rbind(dt_completer_status, dt_not_completer_status)
dt_status[, worker_id_found_on_MTurk := as.numeric(toupper(worker_id) %in% toupper(submitted_MTurk_ids))]
dt_status[, task_name := task_name]
dt_status[, task_date := substr(current_task_data[1]$StartDate, 1, 10)]
dt_status[, treatment_payrate := treatment_payrate]
dt_status[, pay_or_not := as.numeric(accuracy >= payment_accuracy_threshold &
screener == 1 &
complete_task == 1 &
worker_id_found_on_MTurk == 1 &
repeater == 0)]
dt_status[, total_bonus := pay_or_not*( bonus_rate * str_count(group,"T"))]
dt_status
}
rm(list = ls())
# load supporting functions
# setwd("/home/fred/Field_Experiment_Human_Image_Classification/code")
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design1_data_transformation_functions.r")
source(file = "design1_data_analysis_functions.r")
#---------------------------------------------------------------------#
# read in qualtric output csv
qualtric_data_path = "../qualtric_data/20171123_qualtric_results_design2_pilot.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
# load supporting functions
source(file = "design2_data_transformation_functions.r")
#source(file = "design1_data_analysis_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status.design2(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ.design2,
payment_accuracy_threshold = 0.75,
task_name = "design2 pilot", #!!! UPDATE
treatment_payrate = 0.10, #!!! UPDATE
bonus_rate = 0.05,
existing_path = existing_path)
# Who pass this HIT enough to be eligible for payment
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id", "total_bonus")]
eligbile_id
# Use this code to append updated worker status info to existing worker status sheet
rm(list = ls())
# load supporting functions
# setwd("/home/fred/Field_Experiment_Human_Image_Classification/code")
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design1_data_transformation_functions.r")
source(file = "design1_data_analysis_functions.r")
#---------------------------------------------------------------------#
# read in qualtric output csv
qualtric_data_path = "../qualtric_data/20171123_qualtric_results_design2_pilot.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
# load supporting functions
source(file = "design2_data_transformation_functions.r")
#source(file = "design1_data_analysis_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status.design2(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ.design2,
payment_accuracy_threshold = 0.75,
task_name = "design2 pilot", #!!! UPDATE
treatment_payrate = 0.10, #!!! UPDATE
bonus_rate = 0.05,
existing_path = existing_path)
existing_status = fread(existing_path)[,-c("V1")]
all_status = rbind(existing_status, worderIDs_task_status, fill=TRUE)
View(all_status)
write.csv(x = all_status, file = existing_path)
400*0.20*1.5
240*0.20*1.5
evaluate_worker_perf.design2(current_task_data,allQ.design2)
all_workers.dt = evaluate_worker_perf.design2(current_task_data,allQ.design2)
tmp.group = all_workers.dt[group == "CCC", .(mean = mean(accuracy),
SD = sd(accuracy),
min = min(accuracy),
max = max(accuracy),
mean_S1 = mean(accuracy_S1)]
all_workers.dt = evaluate_worker_perf.design2(current_task_data,allQ.design2)
tmp.group = all_workers.dt[group == "CCC", .(mean = mean(accuracy),
SD = sd(accuracy),
min = min(accuracy),
max = max(accuracy),
mean_S1 = mean(accuracy_S1))]
tmp.group
all_workers.dt = evaluate_worker_perf.design2(current_task_data,allQ.design2)
tmp.group.CCC = all_workers.dt[group == "CCC", .(
group = "CCC"
mean = mean(accuracy),
SD = sd(accuracy),
min = min(accuracy),
max = max(accuracy),
mean_S1 = mean(accuracy_S1),
mean_S2 = mean(accuracy_S2),
mean_S3 = mean(accuracy_S3))]
all_workers.dt = evaluate_worker_perf.design2(current_task_data,allQ.design2)
tmp.group.CCC = all_workers.dt[group == "CCC", .(
group = "CCC",
mean = mean(accuracy),
SD = sd(accuracy),
min = min(accuracy),
max = max(accuracy),
mean_S1 = mean(accuracy_S1),
mean_S2 = mean(accuracy_S2),
mean_S3 = mean(accuracy_S3))]
tmp.group.CCC
summarize_worker_perf.design2 = function(current_task_data, allQ.design2) {
all_workers.dt = evaluate_worker_perf.design2(current_task_data,allQ.design2)
tmp.group.CCC = all_workers.dt[group == "CCC", .(
group = "CCC",
mean = mean(accuracy),
SD = sd(accuracy),
min = min(accuracy),
max = max(accuracy),
mean_S1 = mean(accuracy_S1),
mean_S2 = mean(accuracy_S2),
mean_S3 = mean(accuracy_S3))]
tmp.group.CCT = all_workers.dt[group == "CCT", .(
group = "CCT",
mean = mean(accuracy),
SD = sd(accuracy),
min = min(accuracy),
max = max(accuracy),
mean_S1 = mean(accuracy_S1),
mean_S2 = mean(accuracy_S2),
mean_S3 = mean(accuracy_S3))]
tmp.group.CTT = all_workers.dt[group == "CTT", .(
group = "CTT",
mean = mean(accuracy),
SD = sd(accuracy),
min = min(accuracy),
max = max(accuracy),
mean_S1 = mean(accuracy_S1),
mean_S2 = mean(accuracy_S2),
mean_S3 = mean(accuracy_S3))]
tmp.group.TTT = all_workers.dt[group == "TTT", .(
group = "TTT",
mean = mean(accuracy),
SD = sd(accuracy),
min = min(accuracy),
max = max(accuracy),
mean_S1 = mean(accuracy_S1),
mean_S2 = mean(accuracy_S2),
mean_S3 = mean(accuracy_S3))]
rbind(tmp.group.CCC,tmp.group.CCT,tmp.group.CTT,tmp.group.TTT)
}
summarize_worker_perf.design2(current_task_data, allQ.design2)
eligbile_id
rm(list = ls())
# load supporting functions
# setwd("/home/fred/Field_Experiment_Human_Image_Classification/code")
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design1_data_transformation_functions.r")
source(file = "design1_data_analysis_functions.r")
#---------------------------------------------------------------------#
# read in qualtric output csv
qualtric_data_path = "../qualtric_data/20171123_qualtric_results_design2_pilot.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
# load supporting functions
source(file = "design2_data_transformation_functions.r")
#source(file = "design1_data_analysis_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status.design2(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ.design2,
payment_accuracy_threshold = 0.75,
task_name = "design2 pilot", #!!! UPDATE
treatment_payrate = 0.10, #!!! UPDATE
bonus_rate = 0.05,
existing_path = existing_path)
# Who pass this HIT enough to be eligible for payment
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id", "total_bonus")]
eligbile_id
rm(list = ls())
# load supporting functions
# setwd("/home/fred/Field_Experiment_Human_Image_Classification/code")
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design1_data_transformation_functions.r")
source(file = "design1_data_analysis_functions.r")
#---------------------------------------------------------------------#
# read in qualtric output csv
qualtric_data_path = "../qualtric_data/20171123_qualtric_results_design2_pilot.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
# load supporting functions
source(file = "design2_data_transformation_functions.r")
#source(file = "design1_data_analysis_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status.design2(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ.design2,
payment_accuracy_threshold = 0.75,
task_name = "design2 pilot", #!!! UPDATE
treatment_payrate = 0.10, #!!! UPDATE
bonus_rate = 0.05,
existing_path = existing_path)
# Who pass this HIT enough to be eligible for payment
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id", "total_bonus")]
eligbile_id
rm(list = ls())
# load supporting functions
# setwd("/home/fred/Field_Experiment_Human_Image_Classification/code")
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design2_data_transformation_functions.r")
source(file = "design1_data_analysis_functions.r")
#---------------------------------------------------------------------#
# read in qualtric output csv
qualtric_data_path = "../qualtric_data/20171123_qualtric_results_design2_pilot.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
# load supporting functions
source(file = "design2_data_transformation_functions.r")
#source(file = "design1_data_analysis_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status.design2(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ.design2,
payment_accuracy_threshold = 0.75,
task_name = "design2 pilot", #!!! UPDATE
treatment_payrate = 0.10, #!!! UPDATE
bonus_rate = 0.05,
existing_path = existing_path)
# Who pass this HIT enough to be eligible for payment
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id", "total_bonus")]
eligbile_id
View(worderIDs_task_status)
eligbile_id = worderIDs_task_status[pay_or_not == 1, c("worker_id", "total_bonus")]
eligbile_id
# read in qualtric output csv
qualtric_data_path = "../qualtric_data/20171123_qualtric_results_design2_pilot.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
# load supporting functions
source(file = "design2_data_transformation_functions.r")
#source(file = "design1_data_analysis_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status.design2(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ.design2,
payment_accuracy_threshold = 0.75,
task_name = "design2 pilot", #!!! UPDATE
treatment_payrate = 0.10, #!!! UPDATE
bonus_rate = 0.05,
existing_path = existing_path)
View(worderIDs_task_status)
rm(list = ls())
# load supporting functions
# setwd("/home/fred/Field_Experiment_Human_Image_Classification/code")
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
#---------------------------------------------------------------------#
# read in qualtric output csv
qualtric_data_path = "../qualtric_data/20171123_qualtric_results_design2_pilot.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171123_mturk_results_design2_pilot.csv" #!!! UPDATE
# load supporting functions
source(file = "design2_data_transformation_functions.r")
#source(file = "design1_data_analysis_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
# adjust the payment threshold if 0.25 task accuracy is too low
worderIDs_task_status = construct_frame_worderIDs_task_status.design2(current_task_data = current_task_data,
submitted_MTurk_ids = MTurk_worker_id,
allQ = allQ.design2,
payment_accuracy_threshold = 0.75,
task_name = "design2 pilot", #!!! UPDATE
treatment_payrate = 0.10, #!!! UPDATE
bonus_rate = 0.05,
existing_path = existing_path)
View(worderIDs_task_status)
worderIDs_task_status$accuracy
worderIDs_task_status$accuracy>0.75
worderIDs_task_status$screener == 1
worderIDs_task_status$complete_task == 1
worderIDs_task_status$repeater == 0
400*0.20*1.5
240*0.20*1.5
240*0.25*1.5
60*0.05
60*0.10
60*0.15
240*0.25*1.5
240*0.20*1.5
60*0.10
60*0.20
60*0.30
72+6+12+18
108*0.70
108*0.75
240*0.22*1.5
79.2 + 6 + 12 + 18
115.2 * 0.8
115.2 * 0.9
108*0.8
240*0.22*1.5
240*0.22*1.5 + 36
115.2*0.8
all.table = fread("design2_OH_simulation.csv")
library(data.table)
all.table = fread("design2_OH_simulation.csv")
View(all.table)
rm(list = ls())
# load supporting functions
# setwd("/home/fred/Field_Experiment_Human_Image_Classification/code")
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design1_data_transformation_functions.r")
source(file = "design1_data_analysis_functions.r")
#---------------------------------------------------------------------#
# read in qualtric output csv
qualtric_data_path = "../qualtric_data/20171127_qualtric_results_design2_main.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171127_mturk_results_design2_main.csv" #!!! UPDATE
# load supporting functions
source(file = "design2_data_transformation_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
#---------------------------------------------------------------------#
design2_worker_perf = evaluate_worker_perf.design2(current_task_data, allQ.design2)
View(design2_worker_perf)
stack(design2_worker_perf)
dum = stack(design2_worker_perf)
View(dum)
rm(list = ls())
# Use this code to evaluate worker performance based on pilot resul csvs
rm(list = ls())
# load supporting functions
# setwd("/home/fred/Field_Experiment_Human_Image_Classification/code")
setwd("F:/001_Learn_UCB/241_Experiments_and_Causality/final_project/Field_Experiment_Human_Image_Classification/code")
source(file = "design1_data_transformation_functions.r")
source(file = "design1_data_analysis_functions.r")
#---------------------------------------------------------------------#
# read in qualtric output csv
qualtric_data_path = "../qualtric_data/20171127_qualtric_results_design2_main.csv" #!!! UPDATE
MTurk_data_path = "../MTurk_data/20171127_mturk_results_design2_main.csv" #!!! UPDATE
# load supporting functions
source(file = "design2_data_transformation_functions.r")
existing_path = "../MTurk_ID_status/worker_status.csv"
current_task_data = get_current_task_data(csv_path = qualtric_data_path)
MTurk_worker_id = get_MTurk_worker_id(csv_path = MTurk_data_path)
#---------------------------------------------------------------------#
by_HIT.table = evaluate_worker_perf.design2(current_task_data, allQ.design2)
View(by_HIT.table)
stacked = stack(by_HIT.table)
stacked$ind
stacked[stacked$ind == "worker_id", values]
stacked[stacked$ind == "worker_id", "values"]
length(stacked[stacked$ind == "worker_id", "values"])
names(by_HIT.table)
stacked[stacked$ind == "time_spent_S1", "values"]
"CCC"[1]
strsplit("CCC")
strsplit("CCC", split="")
stacked[stacked$ind == "group", "values"]
strsplit(stacked[stacked$ind == "group", "values"], split = "")
strsplit(stacked[stacked$ind == "group", "values"], split = "")[[1]]
strsplit(stacked[stacked$ind == "group", "values"], split = "")[1]
strsplit(stacked[stacked$ind == "group", "values"], split = "")
strsplit(stacked[stacked$ind == "group", "values"], split = "")
stacked[stacked$ind == "group", "values"]
lapply(stacked[stacked$ind == "group", "values"], strsplit(split=""))
?lapply
lapply(stacked[stacked$ind == "group", "values"], strsplit())
lapply(stacked[stacked$ind == "group", "values"], strsplit, split="")
lapply(stacked[stacked$ind == "group", "values"], strsplit, split="")[[1]]
lapply(stacked[stacked$ind == "group", "values"], strsplit, split="")[1]
substr(stacked[stacked$ind == "group", "values"], 1)
substr(stacked[stacked$ind == "group", "values"])
substr(stacked[stacked$ind == "group", "values"], start = 1, end = 2)
substr(stacked[stacked$ind == "group", "values"], start = 1, stop = 2)
substr(stacked[stacked$ind == "group", "values"], start = 1, stop = 1)
substr(stacked[stacked$ind == "group", "values"], start = 1, stop = 1) == "T"
as.numeric(substr(stacked[stacked$ind == "group", "values"], start = 1, stop = 1) == "T")
as.numeric(substr(stacked[stacked$ind == "group", "values"], start = 1, stop = 1) == "T")*0.10
as.numeric(substr(stacked[stacked$ind == "group", "values"], start = 1, stop = 1) == "T")
substr(stacked[stacked$ind == "group", "values"], start = 1)
names(by_HIT.table)
